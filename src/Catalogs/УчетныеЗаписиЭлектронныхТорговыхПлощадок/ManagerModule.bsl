#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает доступную учетную запись в случае, если она является единственной в справочнике.
// В случае отсутствия записей или наличия более одной возвращается пустая ссылка.
//
// Параметры:
//   ВидЭТП - ПеречислениеСсылка.ВидыЭлектронныхТорговыхПлощадок - вид электронной торговой площадки для получения учетной записи.
//
// Возвращаемое значение:
//   СправочникСсылка.УчетныеЗаписиЭлектронныхТорговыхПлощадок - учетная запись по-умолчанию.
//
Функция ОсновнаяУчетнаяЗапись(ВидЭТП) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
    	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
    	|	УчетныеЗаписиЭТП.Ссылка КАК УчетнаяЗапись
    	|ИЗ
    	|	Справочник.УчетныеЗаписиЭлектронныхТорговыхПлощадок КАК УчетныеЗаписиЭТП
    	|ГДЕ
    	|	УчетныеЗаписиЭТП.ВидЭТП = &ВидЭТП
    	|	И НЕ УчетныеЗаписиЭТП.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВидЭТП", ВидЭТП);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ПредопределенноеЗначение("Справочник.УчетныеЗаписиЭлектронныхТорговыхПлощадок.ПустаяСсылка");
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() = 2 Тогда
		Возврат ПредопределенноеЗначение("Справочник.УчетныеЗаписиЭлектронныхТорговыхПлощадок.ПустаяСсылка");
	КонецЕсли;

	Выборка.Следующий();
	Возврат Выборка.УчетнаяЗапись;

КонецФункции

// Возвращает количество подключений к электронной торговой площадке.
//
// Параметры:
//   ВидЭТП - ПеречислениеСсылка.ВидыЭлектронныхТорговыхПлощадок - вид электронной торговой площадки.
// 
// Возвращаемое значение:
//   Число - количество подключений.
//
Функция КоличествоПодключений(ВидЭТП) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидЭТП", ВидЭТП);
	Запрос.Текст =
    	"ВЫБРАТЬ
    	|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УчетныеЗаписиЭТП.Ссылка), 0) КАК КоличествоПодключений
    	|ИЗ
    	|	Справочник.УчетныеЗаписиЭлектронныхТорговыхПлощадок КАК УчетныеЗаписиЭТП
    	|ГДЕ
    	|	УчетныеЗаписиЭТП.ВидЭТП = &ВидЭТП
    	|	И НЕ УчетныеЗаписиЭТП.ПометкаУдаления";

	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат 0; 
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();

	Возврат Выборка.КоличествоПодключений;

КонецФункции

// Возвращает результат проверки существования доступной учетной записи.
//
// Параметры:
//   ВидЭТП - ПеречислениеСсылка.ВидыЭлектронныхТорговыхПлощадок - вид электронной торговой площадки.
// 
// Возвращаемое значение:
//   Булево - результат проверки существования доступной учетной записи.
//
Функция ЕстьДоступнаяУчетнаяЗапись(ВидЭТП) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидЭТП", ВидЭТП);
	Запрос.Текст =
    	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
    	|	УчетныеЗаписиЭТП.Ссылка
    	|ИЗ
    	|	Справочник.УчетныеЗаписиЭлектронныхТорговыхПлощадок КАК УчетныеЗаписиЭТП
    	|ГДЕ
    	|	УчетныеЗаписиЭТП.ВидЭТП = &ВидЭТП
    	|	И НЕ УчетныеЗаписиЭТП.ПометкаУдаления";

	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();

КонецФункции

// Получение актуальной учетной записи организации
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - Организация
// 
// Возвращаемое значение:
//   СправочникСсылка.УчетныеЗаписиЭлектронныхТорговыхПлощадок - учетная запись ЭТП
//
Функция УчетнаяЗаписьОрганизации(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	УчетныеЗаписиЭТП.Ссылка КАК УчетнаяЗапись
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектронныхТорговыхПлощадок КАК УчетныеЗаписиЭТП
	|ГДЕ
	|	УчетныеЗаписиЭТП.Организация = &Организация
	|	И НЕ УчетныеЗаписиЭТП.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.УчетныеЗаписиЭлектронныхТорговыхПлощадок.ПустаяСсылка(); 
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.УчетнаяЗапись;
	
КонецФункции

// Проверяет актуальность учетной записи
// 
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектронныхТорговыхПлощадок - проверяемая учетная запись
//  ВидЭТП - ПеречислениеСсылка.ВидыЭлектронныхТорговыхПлощадок - этп в которой проверяется актуальность учетной записи
// 
// Возвращаемое значение:
//   СправочникСсылка.УчетныеЗаписиЭлектронныхТорговыхПлощадок - учетная запись ЭТП
//
Функция УчетнаяЗаписьАктуальна(УчетнаяЗапись, ВидЭТП) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Истина КАК УчетнаяЗаписьАктуальна
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектронныхТорговыхПлощадок КАК УчетныеЗаписиЭТП
	|ГДЕ
	|	УчетныеЗаписиЭТП.Ссылка = &УчетнаяЗапись
	|	И УчетныеЗаписиЭТП.ВидЭТП = &ВидЭТП
	|	И НЕ УчетныеЗаписиЭТП.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ВидЭТП", ВидЭТП);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом
//
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

#КонецОбласти

#КонецЕсли
