#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.КоличествоЗаписейРегистраторовРасчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.16.45";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3de72ee8-f8b2-11e4-92f1-0060768b35ac");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.КоличествоЗаписейРегистраторовРасчетов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	Обработчик.Комментарий = НСтр("ru = 'Получает и записывает число записей по каждому регистру оперативных взаиморасчетов'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОплат.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланОплат.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланПоставок.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.КоличествоЗаписейРегистраторовРасчетов.ПолноеИмя());
	
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСКлиентамиПланОплат.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСПоставщикамиПланОплат.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСПоставщикамиПланПоставок.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ЗаданияКРаспределениюРасчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = "РегистрСведений.КоличествоЗаписейРегистраторовРасчетов";
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрСведений.КоличествоЗаписейРегистраторовРасчетов");

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТДанныеРегистраторов.Ссылка КАК Документ
	|ИЗ
	|	Документ.РегистраторРасчетов КАК ВТДанныеРегистраторов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоличествоЗаписейРегистраторовРасчетов КАК КоличествоЗаписейРегистраторовРасчетов
	|		ПО КоличествоЗаписейРегистраторовРасчетов.Документ = ВТДанныеРегистраторов.Ссылка
	|ГДЕ
	|	КоличествоЗаписейРегистраторовРасчетов.Документ ЕСТЬ NULL";
	Регистраторы = Запрос.Выполнить().Выгрузить();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "РегистрСведений.КоличествоЗаписейРегистраторовРасчетов";
	Если Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта) Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;

	ЗапросРасчетыСПартнерами = Новый Запрос;
	ТекстЗапросаРасчетыСКлиентами = "
	|ВЫБРАТЬ
	|	Регистр.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Регистр.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Регистр.Валюта КАК Валюта,
	|	""РасчетыСКлиентамиПоСрокам"" КАК ИмяТаблицы,
	|	НАЧАЛОПЕРИОДА(Регистр.Период, ДЕНЬ) КАК ПериодЗаписи,
	|	Регистр.Регистратор КАК Документ,
	|	КОЛИЧЕСТВО(Регистр.НомерСтроки) КАК КоличествоЗаписей
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Регистр
	|ГДЕ
	|	Регистр.Регистратор = &Регистратор
	|СГРУППИРОВАТЬ ПО
	|	Регистр.АналитикаУчетаПоПартнерам,
	|	Регистр.ОбъектРасчетов,
	|	Регистр.Валюта,
	|	""РасчетыСКлиентамиПоСрокам"",
	|	НАЧАЛОПЕРИОДА(Регистр.Период, ДЕНЬ),
	|	Регистр.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Регистр.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Регистр.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Регистр.Валюта КАК Валюта,
	|	""РасчетыСКлиентамиПланОплат"" КАК ИмяТаблицы,
	|	НАЧАЛОПЕРИОДА(Регистр.Период, ДЕНЬ) КАК ПериодЗаписи,
	|	Регистр.Регистратор КАК Документ,
	|	КОЛИЧЕСТВО(Регистр.НомерСтроки) КАК КоличествоЗаписей
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПланОплат КАК Регистр
	|ГДЕ
	|	Регистр.Регистратор = &Регистратор
	|СГРУППИРОВАТЬ ПО
	|	Регистр.АналитикаУчетаПоПартнерам,
	|	Регистр.ОбъектРасчетов,
	|	Регистр.Валюта,
	|	""РасчетыСКлиентамиПланОплат"",
	|	НАЧАЛОПЕРИОДА(Регистр.Период, ДЕНЬ),
	|	Регистр.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Регистр.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Регистр.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Регистр.Валюта КАК Валюта,
	|	""РасчетыСКлиентамиПланОтгрузок"" КАК ИмяТаблицы,
	|	НАЧАЛОПЕРИОДА(Регистр.Период, ДЕНЬ) КАК ПериодЗаписи,
	|	Регистр.Регистратор КАК Документ,
	|	КОЛИЧЕСТВО(Регистр.НомерСтроки) КАК КоличествоЗаписей
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПланОтгрузок КАК Регистр
	|ГДЕ
	|	Регистр.Регистратор = &Регистратор
	|СГРУППИРОВАТЬ ПО
	|	Регистр.АналитикаУчетаПоПартнерам,
	|	Регистр.ОбъектРасчетов,
	|	Регистр.Валюта,
	|	""РасчетыСКлиентамиПланОтгрузок"",
	|	НАЧАЛОПЕРИОДА(Регистр.Период, ДЕНЬ),
	|	Регистр.Регистратор";
	
	ТекстЗапросаРасчетыСПоставщиками = "
	|ВЫБРАТЬ
	|	Регистр.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Регистр.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Регистр.Валюта КАК Валюта,
	|	""РасчетыСПоставщикамиПоСрокам"" КАК ИмяТаблицы,
	|	НАЧАЛОПЕРИОДА(Регистр.Период, ДЕНЬ) КАК ПериодЗаписи,
	|	Регистр.Регистратор КАК Документ,
	|	КОЛИЧЕСТВО(Регистр.НомерСтроки) КАК КоличествоЗаписей
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Регистр
	|ГДЕ
	|	Регистр.Регистратор = &Регистратор
	|СГРУППИРОВАТЬ ПО
	|	Регистр.АналитикаУчетаПоПартнерам,
	|	Регистр.ОбъектРасчетов,
	|	Регистр.Валюта,
	|	""РасчетыСПоставщикамиПоСрокам"",
	|	НАЧАЛОПЕРИОДА(Регистр.Период, ДЕНЬ),
	|	Регистр.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Регистр.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Регистр.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Регистр.Валюта КАК Валюта,
	|	""РасчетыСПоставщикамиПланОплат"" КАК ИмяТаблицы,
	|	НАЧАЛОПЕРИОДА(Регистр.Период, ДЕНЬ) КАК ПериодЗаписи,
	|	Регистр.Регистратор КАК Документ,
	|	КОЛИЧЕСТВО(Регистр.НомерСтроки) КАК КоличествоЗаписей
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПланОплат КАК Регистр
	|ГДЕ
	|	Регистр.Регистратор = &Регистратор
	|СГРУППИРОВАТЬ ПО
	|	Регистр.АналитикаУчетаПоПартнерам,
	|	Регистр.ОбъектРасчетов,
	|	Регистр.Валюта,
	|	""РасчетыСПоставщикамиПланОплат"",
	|	НАЧАЛОПЕРИОДА(Регистр.Период, ДЕНЬ),
	|	Регистр.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Регистр.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Регистр.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Регистр.Валюта КАК Валюта,
	|	""РасчетыСПоставщикамиПланПоставок"" КАК ИмяТаблицы,
	|	НАЧАЛОПЕРИОДА(Регистр.Период, ДЕНЬ) КАК ПериодЗаписи,
	|	Регистр.Регистратор КАК Документ,
	|	КОЛИЧЕСТВО(Регистр.НомерСтроки) КАК КоличествоЗаписей
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПланПоставок КАК Регистр
	|ГДЕ
	|	Регистр.Регистратор = &Регистратор
	|СГРУППИРОВАТЬ ПО
	|	Регистр.АналитикаУчетаПоПартнерам,
	|	Регистр.ОбъектРасчетов,
	|	Регистр.Валюта,
	|	""РасчетыСПоставщикамиПланПоставок"",
	|	НАЧАЛОПЕРИОДА(Регистр.Период, ДЕНЬ),
	|	Регистр.Регистратор";

	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Данные.Документ КАК Документ
	|ПОМЕСТИТЬ ВтДанныеДляОбработки
	|ИЗ
	|	&ОбновляемыеДанные КАК Данные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеДляОбработки.Документ КАК Документ,
	|	ЕСТЬNULL(РегистраторРасчетов.ТипРасчетов, ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.ПустаяСсылка)) КАК ТипРасчетов
	|ИЗ
	|	ВтДанныеДляОбработки КАК ВтДанныеДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегистраторРасчетов КАК РегистраторРасчетов
	|		ПО РегистраторРасчетов.Ссылка = ВтДанныеДляОбработки.Документ";
	Запрос.УстановитьПараметр("ОбновляемыеДанные", ОбновляемыеДанные);
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		НачатьТранзакцию();
		
		Попытка
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КоличествоЗаписейРегистраторовРасчетов");
			ЭлементБлокировки.УстановитьЗначение("Документ", Выборка.Документ);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

			Если Выборка.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
				
				ЗапросРасчетыСПартнерами.Текст = ТекстЗапросаРасчетыСКлиентами;

				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСКлиентамиПоСрокам.НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Документ);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСКлиентамиПланОплат.НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Документ);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСКлиентамиПланОтгрузок.НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Документ);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Иначе
				
				ЗапросРасчетыСПартнерами.Текст = ТекстЗапросаРасчетыСПоставщиками;
				
				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСПоставщикамиПоСрокам.НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Документ);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСПоставщикамиПланОплат.НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Документ);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСПоставщикамиПланПоставок.НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Документ);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				
			КонецЕсли;
			
			Блокировка.Заблокировать();
			
			ЗапросРасчетыСПартнерами.УстановитьПараметр("Регистратор", Выборка.Документ);
			ВыборкаРасчетыСПартнерами = ЗапросРасчетыСПартнерами.Выполнить().Выбрать();
			
			Пока ВыборкаРасчетыСПартнерами.Следующий() Цикл
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, ВыборкаРасчетыСПартнерами);
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);

			ЗафиксироватьТранзакцию();

		Исключение

			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Документ);
			ВызватьИсключение (ОписаниеОшибки());

		КонецПопытки;

	КонецЦикла;

	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
