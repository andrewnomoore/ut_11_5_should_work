// @strict-types
#Область ПрограммныйИнтерфейс

// Генерация текста события, для записиси в журнал регистрации
// 
// Параметры:
//  ВидЭТП - ПеречислениеСсылка.ВидыЭлектронныхТорговыхПлощадок - вид электронной торговой площадки
// 
// Возвращаемое значение:
// 	Строка - текст события
//  
Функция СобытиеЖурналаРегистрации(ВидЭТП) Экспорт

	ПредставлениеВидаЭТП = XMLСтрока(ВидЭТП);

	ШаблонТекстаСобытия = "ru = 'Интеграция с %1'";
	ТекстСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(ШаблонТекстаСобытия,
		ОбщегоНазначения.КодОсновногоЯзыка()), ПредставлениеВидаЭТП);

	Возврат ТекстСобытия;

КонецФункции

// Возвращает список используемых подсистемой префиксов настроек.
// Параметры:
//   ВидЭТП - ПеречислениеСсылка.ВидыЭлектронныхТорговыхПлощадок - электронная торговая площадка.
//
// Возвращаемое значение:
//   Структура - список используемых подсистемой префиксов настроек. Содержит свойства:
//		* НастройкиСервиса - Строка - Идентификатор хранения настроек в безопасном хранилище
//
Функция ПрефиксыСервиса(ВидЭТП) Экспорт

	ПредставлениеВидаЭТП = XMLСтрока(ВидЭТП);

	Префиксы = Новый Структура;
	Префиксы.Вставить("НастройкиСервиса", ПредставлениеВидаЭТП + "Setup_");

	Возврат Префиксы;

КонецФункции

// Проверяет возможность установки соединения с электронной торговой площадкой.
//
// Параметры:
//   ДанныеДляПодключения - Структура
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектронныхТорговыхПлощадок - учетная запись, для которой проверяется подключение.
//   Организация - СправочникСсылка.Организации (необязателен при заполненном свойстве УчетнаяЗапись).
//   ВидЭТП - ПеречислениеСсылка.ВидыЭлектронныхТорговыхПлощадок (необязателен при заполненном свойстве УчетнаяЗапись).
//   КлючAPI - строка - ключ, используемый для авторизации (необязателен при заполненном свойстве УчетнаяЗапись).
// 
// Возвращаемое значение:
//   Структура - содержит свойства:
//     * КодСостояния - Число - код состояния (ответа) выполнения запроса HTTP-сервера, 
//                        см. http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html .
//     * ТекстОшибки  - Строка - описание ошибки при выполнении HTTP-запроса.
//
Функция ПроверитьСвязьСЭТПБидзаар(ДанныеДляПодключения) Экспорт

	Результат = Новый Структура("КодСостояния, ТекстОшибки", 200, "");

	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектронныхТорговыхПлощадок.ПустаяСсылка();
	ДанныеДляПодключения.Свойство("УчетнаяЗапись", УчетнаяЗапись);
	ВидЭТП = Перечисления.ВидыЭлектронныхТорговыхПлощадок.ПустаяСсылка();
	ДанныеДляПодключения.Свойство("ВидЭТП", ВидЭТП);

	ДанныеАвторизаци = ДанныеАвторизации(ВидЭТП, УчетнаяЗапись);

	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда

		ЗаполнитьЗначенияСвойств(ДанныеАвторизаци, ДанныеДляПодключения);

	КонецЕсли;

	КлючAPI = "";
	ДанныеАвторизаци.Свойство("КлючAPI", КлючAPI);

	Если Не ЗначениеЗаполнено(ВидЭТП) Или Не ЗначениеЗаполнено(КлючAPI) Тогда
		Результат.КодСостояния = 401;
		Результат.ТекстОшибки = НСтр(
			"ru = 'Не удалось авторизоваться, проверьте корректность настроек подключения'");
		Возврат Результат;
	КонецЕсли;

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("КлючAPI", КлючAPI);
	ПараметрыЗапроса.Вставить("ВариантВыгрузки", -1);

	ЗапросСервиса = ЗапросСервисаПубликацияТоваровИУслугБидзаар(ПараметрыЗапроса, Истина);
	ЗапросСервиса.Вставить("ВидЭТП", ВидЭТП);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса);

	Результат.КодСостояния = РезультатЗапроса.КодСостояния;

	Если Результат.КодСостояния = 0 Тогда
		Результат.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
	ИначеЕсли Результат.КодСостояния = 200 Тогда
		Результат.ТекстОшибки = "OK";
	ИначеЕсли Результат.КодСостояния = 301 Тогда
		Результат.ТекстОшибки = "Moved Permanently";
	ИначеЕсли Результат.КодСостояния = 400 Тогда
		Результат.ТекстОшибки = НСтр("ru = 'Не удалось выгрузить данные, проверьте корректность настроек подключения'");
	ИначеЕсли Результат.КодСостояния = 401 Тогда
		Результат.ТекстОшибки = НСтр("ru = 'Не удалось выгрузить данные, проверьте корректность настроек подключения'");
	ИначеЕсли Результат.КодСостояния = 403 Тогда
		Результат.ТекстОшибки = "Forbidden";
	ИначеЕсли Результат.КодСостояния = 404 Тогда
		Результат.ТекстОшибки = "Not Found";
	ИначеЕсли Результат.КодСостояния = 409 Тогда
		Результат.ТекстОшибки = "Conflict";
	ИначеЕсли Результат.КодСостояния = 500 Тогда
		Результат.ТекстОшибки = "Internal Server Error";
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Отправляет товары и услуги на электронную торговую площадку
//
// Параметры:
// 	ПараметрыЗапроса - Структура
//  * УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектронныхТорговыхПлощадок - учетная запись подключения к сервису.
//  * ЛимитПозицийНаИтерацию - Число - ограничения выгрузки публикуемых данных на одну итерацию.
//  * Список - массив - список ключевых реквизитов данных, по которым необходимо произвести выгрузку.
//	* ВариантВыгрузки - число - управляет способом получения данных для выгрузки
//		-1 - выгрузить пустой список данных
//		 1 - выгрузить данные, находящиеся в статусе "К публикации" 
//		 2 - выгрузить данные по указанным в "Список" ключевым реквизитам
//		 любое другое чило - выгрузить все имеющиеся данные, не смотря на их статус.
//	АдресРезультата - Строка - Адрес временного хранилища, в которм будет размещен результат выполнения
//
Процедура ПубликацияТоваровИУслугБидзаар(Знач ПараметрыЗапроса, АдресРезультата) Экспорт

	РезультатПубликации = Новый Структура("КоличествоОпубликованныхПозиций, ТекстОшибки", 0, "");

	УстановитьПривилегированныйРежим(Истина);

	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектронныхТорговыхПлощадок.ПустаяСсылка();
	ПараметрыЗапроса.Свойство("УчетнаяЗапись", УчетнаяЗапись);
	ВидЭТП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ВидЭТП");

	ДанныеАвторизаци = ДанныеАвторизации(ВидЭТП, УчетнаяЗапись);

	Если Не ЗначениеЗаполнено(ДанныеАвторизаци.КлючAPI) Тогда
		РезультатПубликации.ТекстОшибки = НСтр(
			"ru = 'Не удалось выгрузить данные, введите уникальный ключ API в настройках подключения организации к Бидзаар'");
		ПоместитьВоВременноеХранилище(РезультатПубликации, АдресРезультата);
		Возврат;
	КонецЕсли;

	ДанныеДляПодключения = Новый Структура("УчетнаяЗапись, ВидЭТП", УчетнаяЗапись, ВидЭТП);
	РезультатПроверкиСвязи = ПроверитьСвязьСЭТПБидзаар(ДанныеДляПодключения);

	Если РезультатПроверкиСвязи.КодСостояния <> 200 Тогда
		РезультатПроверкиСвязи.Свойство("ТекстОшибки", РезультатПубликации.ТекстОшибки);
		ПоместитьВоВременноеХранилище(РезультатПубликации, АдресРезультата);
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

	ПараметрыЗапроса.Вставить("КлючAPI", ДанныеАвторизаци.КлючAPI);

	ЕстьДанныеДляОбработки = Истина;
	ПараметрыЗапроса.Вставить("НачалоВыгрузки", ТекущаяДатаСеанса());

	Пока ЕстьДанныеДляОбработки Цикл

		ЗапросСервиса = ЗапросСервисаПубликацияТоваровИУслугБидзаар(ПараметрыЗапроса, ЕстьДанныеДляОбработки);

		ЗапросСервиса.Вставить("ВидЭТП", ВидЭТП);

		РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса);

		РезультатЗапроса.Свойство("ТекстОшибки", РезультатПубликации.ТекстОшибки);
		Если ЗначениеЗаполнено(РезультатПубликации.ТекстОшибки) Тогда
			ПоместитьВоВременноеХранилище(РезультатПубликации, АдресРезультата);
			Возврат;
		КонецЕсли;

		Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
			КоличествоОпубликованныхПозиций = ОбработатьРезультатЗапросаПубликацияТоваровИУслугБидзаар(
				ЗапросСервиса.ОбработкаРезультата);
		КонецЕсли;

		РезультатПубликации.КоличествоОпубликованныхПозиций = РезультатПубликации.КоличествоОпубликованныхПозиций
			+ КоличествоОпубликованныхПозиций;

	КонецЦикла;

	ПоместитьВоВременноеХранилище(РезультатПубликации, АдресРезультата);

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Очищает сохраненные данные авторизации по учетной записи.
//
// Параметры:
//   УчетнаяЗаписьЭТП - СправочникСсылка.УчетныеЗаписиЭлектронныхТорговыхПлощадок - учетная запись подключения к сервису.
// 
// Возвращаемое значение:
//   Булево - результат выполнения очистки.
//
Функция ОчиститьНастройкиУчетнойЗаписи(УчетнаяЗаписьЭТП) Экспорт

	ОчисткаУспешна = Истина;

	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);

	Попытка

		ОбъектЭТП = УчетнаяЗаписьЭТП.ПолучитьОбъект();

		ВладелецЗаписиХранилища = ИнтеграцияСЭлектроннымиТорговымиПлощадками.ПрефиксыСервиса(
			ОбъектЭТП.ВидЭТП).НастройкиСервиса + УчетнаяЗаписьЭТП.УникальныйИдентификатор();
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ВладелецЗаписиХранилища, Неопределено);
		УстановитьПривилегированныйРежим(Ложь);

		ОбъектЭТП.УстановитьПометкуУдаления(Истина);

		ЗафиксироватьТранзакцию();

	Исключение

		ОтменитьТранзакцию();
		ОчисткаУспешна = Ложь;

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось очистить настройки по причине: %1'"), ОбработкаОшибок.ПодробноеПредставлениеОшибки(
			ИнформацияОбОшибке()));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

	КонецПопытки;

	Возврат ОчисткаУспешна;

КонецФункции

// Возвращает общие параметры подключения к REST API торговой площадки
//
// Параметры:
//   ВидЭТП - ПеречислениеСсылка.ВидыЭлектронныхТорговыхПлощадок.
//     
// Возвращаемое значение:
//  Структура - содержит свойства:
//  * Сервер - Строка - Имя сервера.
//  * Порт - число - номер порта подключения.
//  * Протокол - строка - протокол передачи данных
//  * Таймаут - число - время ожидания ответа в секундах
//	* ШаблонОшибки - строка
//	* ШаблонОшибкиСКодом - строка
Функция ПараметрыРаботыССервисомАвторизации(ВидЭТП) Экспорт

	ПараметрыРаботы = Новый Структура;
	ПараметрыРаботы.Вставить("Сервер", "");
	ПараметрыРаботы.Вставить("Порт", 443);
	ПараметрыРаботы.Вставить("Протокол", "https");
	ПараметрыРаботы.Вставить("Таймаут", 20);
	ПараметрыРаботы.Вставить("ШаблонОшибки", НСтр("ru = 'При выполнении метода API %1 возникла ошибка: %2'",
		ОбщегоНазначения.КодОсновногоЯзыка()));
	ПараметрыРаботы.Вставить("ШаблонОшибкиСКодом", НСтр(
		"ru = 'При выполнении метода API %1 возникла ошибка: (%2) %3'", ОбщегоНазначения.КодОсновногоЯзыка()));

	Если ВидЭТП = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ВидыЭлектронныхТорговыхПлощадок.Бидзаар") Тогда

		ПараметрыРаботы.Сервер = "bidzaar.com";

	КонецЕсли;

	Возврат ПараметрыРаботы;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеПроцедурыИФункцииДляРаботыССервисом

// Выполнение команды сервиса.
// Параметры:
//  ЗапросСервиса - Структура - параметры вызова или имя команды.
//
// Возвращаемое значение:
//  Произвольный - возвращаемые данные сервиса.
//
Функция ВыполнитьЗапрос(ЗапросСервиса) Экспорт

	Ответ = Новый Структура;
	Ответ.Вставить("КодСостояния", 0);
	Ответ.Вставить("ТекстОтвета", "");
	Ответ.Вставить("ТекстОшибки", "");
	
	Если Не ПравоРаботыССервисомБидзаар(Истина) Тогда
		Ответ.ТекстОшибки = НСтр("ru = 'Нарушение прав доступа.'");
		Возврат Ответ;
	КонецЕсли;
	
	ПараметрыПодключения = ПараметрыРаботыССервисомАвторизации(ЗапросСервиса.ВидЭТП);

	Если ЗапросСервиса.Свойство("Таймаут") И ЗапросСервиса.Таймаут <> 0 Тогда
		Таймаут = ЗапросСервиса.Таймаут;
	Иначе
		Таймаут = ПараметрыПодключения.Таймаут;
	КонецЕсли;

	Запрос = Новый HTTPЗапрос(ЗапросСервиса.Адрес);

	// Установка заголовков запроса.
	Если ЗапросСервиса.Свойство("Заголовки") Тогда
		Для Каждого ПараметрЗаголовка Из ЗапросСервиса.Заголовки Цикл
			Запрос.Заголовки.Вставить(ПараметрЗаголовка.Ключ, ПараметрЗаголовка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	// Установка тела запроса.
	Если ЗначениеЗаполнено(ЗапросСервиса.Данные) Тогда
		Если ТипЗнч(ЗапросСервиса.Данные) = Тип("ДвоичныеДанные") Тогда
			Запрос.УстановитьТелоИзДвоичныхДанных(ЗапросСервиса.Данные);
		Иначе
			Запрос.УстановитьТелоИзСтроки(ЗапросСервиса.Данные);
		КонецЕсли;
	КонецЕсли;

	Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(ПараметрыПодключения.Протокол);
	Если ПараметрыПодключения.Протокол = "https" Тогда
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение( , );
		Соединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер, ПараметрыПодключения.Порт, , , Прокси, Таймаут,
			ЗащищенноеСоединение, Ложь);
	Иначе
		Соединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер, ПараметрыПодключения.Порт);
	КонецЕсли;

	Если Не МетодHTTPДопустим(ЗапросСервиса.Метод) Тогда
		ШаблонОшибки = НСтр("ru = 'Указан недопустимый метод HTTP (%1)'", ОбщегоНазначения.КодОсновногоЯзыка());
		Ответ.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ЗапросСервиса.Метод);
		Возврат Ответ;
	КонецЕсли;

	Попытка
		РезультатЗапроса = Соединение.ВызватьHTTPМетод(ВРег(ЗапросСервиса.Метод), Запрос);

		Ответ.КодСостояния = РезультатЗапроса.КодСостояния;
		Ответ.ТекстОтвета = РезультатЗапроса.ПолучитьТелоКакСтроку("UTF8");
	Исключение
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При отправке запроса на сервер %1 возникла ошибка: %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ПараметрыПодключения.Сервер, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		Ответ.ТекстОшибки = ТекстОшибки;
	КонецПопытки;

	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область СлужебныеКонструкторы

// Описание запроса сервиса.
// 
// Возвращаемое значение:
//  Структура - данные для запроса.
//
Функция НовыйЗапросСервиса()

	ЗапросСервиса = Новый Структура;
	ЗапросСервиса.Вставить("Сервис", "");	// Имя сервиса
	ЗапросСервиса.Вставить("Наименование", ""); // Полное наименование метода.
	ЗапросСервиса.Вставить("Адрес", ""); // Адрес URI метода.
	ЗапросСервиса.Вставить("Метод", ""); // Метод HTTP соединения, например POST. См. МетодыСоединения()
	ЗапросСервиса.Вставить("Права", "");
	ЗапросСервиса.Вставить("Данные");             // Двоичные данные или строка.
	ЗапросСервиса.Вставить("РазрешенныеСостояния", Новый Массив);
	ЗапросСервиса.Вставить("Ошибки", Новый Соответствие); // Соответствие ошибок, например: (404, "Не найдено").
	ЗапросСервиса.Вставить("БлокироватьСообщенияОбОшибках", Ложь); // Не выводить сообщения об ошибках.
	ЗапросСервиса.Вставить("ОбработкаРезультата", Неопределено);        // Строка, ТаблицаЗначений, Неопределено
	ЗапросСервиса.Вставить("Страница", 0);  // page
	ЗапросСервиса.Вставить("РазмерСтраницы", 0);  // size
	ЗапросСервиса.Вставить("ИдентификаторОрганизации", "");
	ЗапросСервиса.Вставить("ВременныйТокен", ""); // используется для выполнения запросов по токенам, не сохраненных в ИБ
	ЗапросСервиса.Вставить("Аутентификация", Ложь); // для некоторых методов, аутентификация может быть не нужна
	ЗапросСервиса.Вставить("ТипКонтента", "  application/json");
	ЗапросСервиса.Вставить("Таймаут", 120);  // Длительность ожидания ответа.
	ЗапросСервиса.Вставить("Результат");        // Свойство возврата результата, например "path[0].cat".
	ЗапросСервиса.Вставить("ДополнительныеПараметры");          // Дополнительные параметры.
	ЗапросСервиса.Вставить("Контент", ""); // Описание контента (передается в заголовке).
	ЗапросСервиса.Вставить("Детализация", ""); // Дополнительная информация для описания деталей запроса.
	ЗапросСервиса.Вставить("Заголовки", Новый Соответствие); // Дополнительная информация для описания деталей запроса.

	Возврат ЗапросСервиса;

КонецФункции

#КонецОбласти

#Область ФормированиеЗапросовКСервису

Функция ЗапросСервисаПубликацияТоваровИУслугБидзаар(ПараметрыЗапроса, ЕстьДанныеДляОбработки)

	ЗапросСервиса = НовыйЗапросСервиса();

	ЗапросСервиса.Наименование = НСтр("ru = 'Публикация товаров и услуг на ЭТП Бидзаар'");
	ЗапросСервиса.Адрес = "/api/goods/" + СокрЛП(ПараметрыЗапроса.КлючAPI);
	ЗапросСервиса.Метод = "PUT";
	ЗапросСервиса.Аутентификация = Ложь;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("charset", "UTF-8");
	Заголовки.Вставить("accept", "application/json");
	Заголовки.Вставить("content-type", "application/json");

	Результат = ЗаполнитьДанныеДляСервисаПубликацияТоваровИУслугБидзаар(ПараметрыЗапроса);

	ЗапросСервиса.Вставить("Заголовки", Заголовки);

	ЗапросСервиса.Данные = ОбщегоНазначения.ЗначениеВJSON(Новый Структура("positions", Результат.ДанныеДляВыгрузки));
	ЗапросСервиса.ОбработкаРезультата = Результат.ОбработкаРезультата;

	Если ТипЗнч(Результат.ОбработкаРезультата) = Тип("Массив") Тогда
		ЕстьДанныеДляОбработки = Результат.ОбработкаРезультата.Количество() > 0;
	Иначе
		ЕстьДанныеДляОбработки = Ложь;
	КонецЕсли;

	Возврат ЗапросСервиса;

КонецФункции

Функция ЗаполнитьДанныеДляСервисаПубликацияТоваровИУслугБидзаар(ПараметрыЗапроса)

	ДанныеДляВыгрузки = Новый Массив;
	ОбработкаРезультата = Новый ТаблицаЗначений;
	
	Результат = Новый Структура("ДанныеДляВыгрузки, ОбработкаРезультата", ДанныеДляВыгрузки, ОбработкаРезультата);

	ВариантВыгрузки = -1;
	ПараметрыЗапроса.Свойство("ВариантВыгрузки", ВариантВыгрузки);

	Запрос = Новый Запрос;

	Если ВариантВыгрузки = -1 Тогда //Данные для проверки подключения
		
		Возврат Результат;

	ИначеЕсли ВариантВыгрузки = 2 Тогда //Данные по указанному в параметрах списку

		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Список.Номенклатура,
		|	Список.Характеристика
		|ПОМЕСТИТЬ ВТ_Список
		|ИЗ
		|	&Список КАК Список
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1000
		|	&УчетнаяЗапись КАК УчетнаяЗапись,
		|	ВТ_Список.Номенклатура КАК Номенклатура,
		|	ВТ_Список.Характеристика КАК Характеристика,
		|	СтатусыПубликацииТоваровЭТП.ПредставлениеНоменклатуры КАК ПредставлениеНоменклатуры
		|ИЗ
		|	ВТ_Список КАК ВТ_Список
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииТоваровЭТП КАК СтатусыПубликацииТоваровЭТП
		|		ПО &УчетнаяЗапись = СтатусыПубликацииТоваровЭТП.УчетнаяЗапись
		|		И ВТ_Список.Номенклатура = СтатусыПубликацииТоваровЭТП.Номенклатура
		|		И ВТ_Список.Характеристика = СтатусыПубликацииТоваровЭТП.Характеристика
		|ГДЕ
		|	НЕ СтатусыПубликацииТоваровЭТП.ПредставлениеНоменклатуры ЕСТЬ NULL
		|	И СтатусыПубликацииТоваровЭТП.ДатаВыгрузки < &НачалоВыгрузки";

		Запрос.УстановитьПараметр("Список", ПараметрыЗапроса["Список"]);

	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	СтатусыПубликацииТоваровЭТП.УчетнаяЗапись КАК УчетнаяЗапись,
		|	СтатусыПубликацииТоваровЭТП.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииТоваровЭТП.Характеристика КАК Характеристика,
		|	СтатусыПубликацииТоваровЭТП.ПредставлениеНоменклатуры КАК ПредставлениеНоменклатуры
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииТоваровЭТП КАК СтатусыПубликацииТоваровЭТП
		|ГДЕ
		|	СтатусыПубликацииТоваровЭТП.УчетнаяЗапись = &УчетнаяЗапись
		|	И ВЫБОР
		|		КОГДА &ВариантВыгрузки = 1
		|			ТОГДА СтатусыПубликацииТоваровЭТП.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовЭТП.КПубликации))
		|		ИНАЧЕ СтатусыПубликацииТоваровЭТП.ДатаВыгрузки < &НачалоВыгрузки
		|	КОНЕЦ";

		Запрос.УстановитьПараметр("ВариантВыгрузки", ВариантВыгрузки);

	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "1000", Формат(ПараметрыЗапроса["ЛимитПозицийНаИтерацию"], "ЧГ="));

	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("УчетнаяЗапись", ПараметрыЗапроса["УчетнаяЗапись"]);
	Запрос.УстановитьПараметр("НачалоВыгрузки", ПараметрыЗапроса["НачалоВыгрузки"]);

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДанных = РезультатЗапроса.Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		ДанныеДляВыгрузки.Добавить(ВыборкаДанных["ПредставлениеНоменклатуры"]);
	КонецЦикла;

	Результат.ОбработкаРезультата = РезультатЗапроса.Выгрузить();

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОбработкаРезультатовЗапросовКСервису

Функция ОбработатьРезультатЗапросаПубликацияТоваровИУслугБидзаар(ОбработкаРезультата)
	
	КоличествоОпубликованныхПозиций = 0;

	ДанныеДляИзменения = ОбработкаРезультата;

	ДатаВыгрузки = ТекущаяДатаСеанса();

	УстановитьПривилегированныйРежим(Истина);

	НачатьТранзакцию();

	Попытка

		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииТоваровЭТП");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировкиДанных.ИсточникДанных = ДанныеДляИзменения;
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("УчетнаяЗапись", "УчетнаяЗапись");
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Характеристика", "Характеристика");
		БлокировкаДанных.Заблокировать();

		Для Каждого СтрокаДанных Из ДанныеДляИзменения Цикл
			Запись = РегистрыСведений.СтатусыПубликацииТоваровЭТП.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, СтрокаДанных);
			Запись.ДатаВыгрузки = ДатаВыгрузки;
			Запись.Статус = Перечисления.СтатусыОбъектовЭТП.Выгружено;
			Запись.Записать();
			КоличествоОпубликованныхПозиций = КоличествоОпубликованныхПозиций + 1;
		КонецЦикла;

		ЗафиксироватьТранзакцию();

	Исключение

		ОтменитьТранзакцию();

		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(Перечисления.ВидыЭлектронныхТорговыхПлощадок.Бидзаар),
			УровеньЖурналаРегистрации.Ошибка, , , ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	УстановитьПривилегированныйРежим(Ложь);

	Возврат КоличествоОпубликованныхПозиций;

КонецФункции

#КонецОбласти

#Область Права

// Проверяет наличие прав для работы с сервисом электронной торговой площадки
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости вывода сообщения о недостаточности прав.
// 
// Возвращаемое значение:
//  Булево - наличие права.
//
Функция ПравоРаботыССервисомБидзаар(ВыводитьСообщение = Ложь) Экспорт

	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;

	ЕстьПраво = ПравоДоступа("Использование", Метаданные.Обработки.УправлениеВыгрузкамиВБидзаар);

	Возврат ЕстьПраво;

КонецФункции

#КонецОбласти

// Данные для прохождения авторизации в сервисе электронной торговой площадки
// 
// Параметры:
//  ВидЭТП  - ПеречислениеСсылка.ВидыЭлектронныхТорговыхПлощадок
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектронныхТорговыхПлощадок
// 
// Возвращаемое значение:
//  Структура - значения свойств, необходимых для авторизации
//
Функция ДанныеАвторизации(ВидЭТП, УчетнаяЗапись)

	ДанныеАвторизации = Новый Структура;

	Если ВидЭТП = Перечисления.ВидыЭлектронныхТорговыхПлощадок.Бидзаар Тогда
		ВладелецЗаписиХранилища = ИнтеграцияСЭлектроннымиТорговымиПлощадками.ПрефиксыСервиса(ВидЭТП).НастройкиСервиса
			+ XMLСтрока(УчетнаяЗапись);
		
		УстановитьПривилегированныйРежим(Истина);
		КлючAPI = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ВладелецЗаписиХранилища, "KeyAPI");
		УстановитьПривилегированныйРежим(Ложь);
		ДанныеАвторизации.Вставить("КлючAPI", КлючAPI);	
	КонецЕсли;

	Возврат ДанныеАвторизации;

КонецФункции

// Проверяет строку на допустимость использования в качестве метода HTTP согласно разделу 4 RFC 7231.
// Параметры:
//  Метод	 - Строка - Переданный метод HTTP.
// 
// Возвращаемое значение:
//  Булево - Признак допустимости метода HTTP.
//
Функция МетодHTTPДопустим(Метод)

	Методы = Новый Структура("DELETE, GET, POST, PUT");
	Возврат Методы.Свойство(ВРег(Метод)) <> Неопределено;

КонецФункции

#КонецОбласти