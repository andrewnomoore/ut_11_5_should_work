
#Область ПрограммныйИнтерфейс

// Возвращает таблицу классификатора из макета с предопределенными элементами. Применяется для классификаторов (ОКВЭД,
// ОКОПФ и т.д.) Макеты хранятся в макетах данного справочника (см. общую форму "ФормаВыбораКода").
//	Параметры:
//		НазваниеМакета - Строка - имя макета, хранящего данные с предопределенными элементами классификатора.
//		ТекущийПериод - Дата - в данном методе не используется, однако может быть обязательной в случае обращения к другим классификаторам из общей формы.
//	Возвращаемое значение:
//		Структура - структура параметров со следующими свойствами:
//			* СписокКодов - ТаблицаЗначений - таблица классификатора с колонками:
//				** Код - Строка - строковое представление кода элемента классификатора.
//				** Наименование - Строка - наименование элемента классификатора.
//
Функция ПолучитьПараметрыФормыВыбораДляКода(НазваниеМакета, ТекущийПериод) Экспорт
	Классификатор = Новый ТаблицаЗначений;
	
	Классификатор.Колонки.Добавить("Код");
	Классификатор.Колонки.Добавить("Наименование");
	Классификатор.Индексы.Добавить("Код");
	//++ Локализация
	Макет =Справочники.Организации.ПолучитьМакет(НазваниеМакета);
	
	ТекущаяОбласть = Макет.Области.Найти("Классификатор");
	
	Если НЕ ТекущаяОбласть = Неопределено Тогда
		
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			КодПоказателя	= СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название		= СокрП(Макет.Область(НомерСтр, 2).Текст);
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			ИначеЕсли ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				НоваяСтрока = Классификатор.Добавить();
				НоваяСтрока.Код				= КодПоказателя;
				НоваяСтрока.Наименование	= Название;
			КонецЕсли;	
				
		КонецЦикла;
		
	КонецЕсли;
	//-- Локализация
	Параметры = Новый Структура;
	Параметры.Вставить("СписокКодов",	Классификатор);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает соответствие кодов к наименованию, указанное в макете. Применяется для классификаторов (ОКВЭД, ОКОПФ и т.д.).
//
//	Параметры:
//		ИмяМакета - Строка - Имя макета, как оно задано в конфигураторе. Если он не будет обнаружен - будет возвращено пустое соответствие.
//		ИмяОбласти - Строка - Имя анализируемой области макета.
//
//	Возвращаемое значение:
//		ФиксированноеСоответствие - Состоит из:
//			* Ключ - Строка -  код, указанный в первой колонке макета;
//			* Значение - Строка - наименование, указанное во второй колонке макета.
//
Функция СоответствиеКодовКНаименованиюИзМакета(ИмяМакета, ИмяОбласти = "Классификатор") Экспорт
	
	СоответствиеКодов = Новый Соответствие;
	
	Макет = Справочники.Организации.ПолучитьМакет(ИмяМакета);
	Если Макет = Неопределено Тогда
		Возврат Новый ФиксированноеСоответствие(СоответствиеКодов);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
	
	Для Ном = 1 По ОбластьМакета.ВысотаТаблицы Цикл
		
		ТекКод = СокрЛП(ОбластьМакета.Область(Ном,1).Текст);
		ТекНаименование = СокрЛП(ОбластьМакета.Область(Ном, 2).Текст);
		
		Если ТекКод = "###" Тогда
			Прервать;
		ИначеЕсли ПустаяСтрока(ТекКод) Тогда
			Продолжить;
		Иначе
			СоответствиеКодов.Вставить(ТекКод, ТекНаименование);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(СоответствиеКодов);
	
КонецФункции

Процедура ДополнитьСписокРеквизитовОрганизации(Реквизиты) Экспорт
	//++ Локализация
	Реквизиты.Вставить("КПП", "");
	Реквизиты.Вставить("ОГРН", "");
	Реквизиты.Вставить("КодПоОКПО", "");
	Реквизиты.Вставить("КодОКВЭД", "");
	Реквизиты.Вставить("СвидетельствоДатаВыдачи", "");
	Реквизиты.Вставить("СвидетельствоСерияНомер", "");
	//-- Локализация
КонецПроцедуры

Процедура ДополнитьРеквизитыОрганизации(Организация, СтруктураРеквизитов, ВыборкаПоОрганизации) Экспорт
	//++ Локализация
	Регистрация = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(Организация);
	РеквизитыРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Регистрация, "КодПоОКТМО, КодПоОКАТО");
	
	СтруктураРеквизитов.Вставить("КодПоОКАТО", "");
	СтруктураРеквизитов.Вставить("КодПоОКТМО", "");
	
	Если ВыборкаПоОрганизации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
		СтруктураРеквизитов.Свидетельство = НСтр("ru='Свидетельство'")
			+ " "
			+ ВыборкаПоОрганизации.СвидетельствоСерияНомер
			+ " "
			+ НСтр("ru='от'")
			+ " "
			+ Формат(ВыборкаПоОрганизации.СвидетельствоДатаВыдачи, "ДЛФ=D");
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитов,РеквизитыРегистрации);
	//-- Локализация
КонецПроцедуры

// Определяет наличие у организации обособленных подразделений (выделенных на отдельный баланс).
//
// Параметры:
//  Организация - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//  Булево - Истина, если в информационной базе ведется учет
//           обособленных подразделений организации, выделенных на отдельный баланс
//
Функция ЕстьОбособленныеПодразделения(Организация) Экспорт
	
	//++ Локализация


	//-- Локализация
	
	Возврат Ложь;
	
КонецФункции

// Возвращает КПП организации на указанную дату.
//
// Параметры:
//     Организация - СправочникСсылка.Организации - Организация.
//     ДатаСведений - Дата - Дата, на которую нужно получить КПП организации.
//
// Возвращаемое значение:
//     Строка - КПП.
//
Функция КППНаДату(Организация, ДатаСведений) Экспорт
	
	//++ Локализация
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации") Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаСведений) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КПП");
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Параметры.Вставить("ДатаСведений", ДатаСведений);
	Запрос.Параметры.Вставить("ПодразделениеОсновнойРегистрации", Справочники.СтруктураПредприятия.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ИсторияРегистраций.Период) КАК Период,
	|	ИсторияРегистраций.Организация КАК Организация
	|ПОМЕСТИТЬ ДатаРегистрации
	|ИЗ
	|	РегистрСведений.РегистрацииВНалоговомОргане КАК ИсторияРегистраций
	|ГДЕ
	|	ИсторияРегистраций.Организация = &Организация
	|	И ИсторияРегистраций.Подразделение = &ПодразделениеОсновнойРегистрации
	|	И ИсторияРегистраций.Период <= &ДатаСведений
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияРегистраций.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ИсторияРегистраций.РегистрацияВНалоговомОргане.КПП, """") КАК КПП
	|ИЗ
	|	ДатаРегистрации КАК ДатаРегистрации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацииВНалоговомОргане КАК ИсторияРегистраций
	|		ПО ДатаРегистрации.Организация = ИсторияРегистраций.Организация
	|			И ИсторияРегистраций.Подразделение = &ПодразделениеОсновнойРегистрации
	|			И ДатаРегистрации.Период = ИсторияРегистраций.Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КПП;
	КонецЕсли;
	//-- Локализация
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КПП");
КонецФункции

//++ Локализация

// Возвращает таблицу соответствия числового кода (первых 2 цифр - класса) и буквенного кода раздела ОКВЭД2 
//
// Возвращаемое значение:
//   ТаблицаЗначений - Содержит колонки:
//    * Код - Строка - Первые 2 цифры числового кода из классификатора ОКВЭД2 (класс)
//    * Раздел - Строка - Буквенное обозначение раздела, в который входит указанный класс
//
Функция БуквенныеКодыРазделовОКВЭД2() Экспорт 

	Макет = Справочники.Организации.ПолучитьМакет("ОКВЭД2БуквенныеКодыРазделов");
	Возврат ОбщегоНазначения.ПрочитатьXMLВТаблицу(Макет.ПолучитьТекст()).Данные;

КонецФункции

Процедура ОбновитьНаименованияОКВЭД2() Экспорт
	
	ТаблицаИзменений = ОбщегоНазначения.ПрочитатьXMLВТаблицу(
		Справочники.Организации.ПолучитьМакет("ОКВЭД2ИзмененияНаименований").ПолучитьТекст()).Данные;
	
	ИзмененныеКоды = ТаблицаИзменений.ВыгрузитьКолонку("Код");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИзмененныеКоды", ИзмененныеКоды);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.КодОКВЭД2 КАК КодОКВЭД2,
	|	Организации.НаименованиеОКВЭД2 КАК НаименованиеОКВЭД2
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.КодОКВЭД2 В (&ИзмененныеКоды)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаименованиеОКВЭД2 = СокрЛП(Выборка.НаименованиеОКВЭД2);
		
		СтруктураОтбора = Новый Структура("Код", СокрЛП(Выборка.КодОКВЭД2));
		Изменения = ТаблицаИзменений.НайтиСтроки(СтруктураОтбора);
		
		Для каждого Изменение Из Изменения Цикл
			Если НаименованиеОКВЭД2 = Изменение.СтароеНаименование Тогда
				НаименованиеОКВЭД2 = Изменение.НовоеНаименование;
			КонецЕсли;
		КонецЦикла;
		
		Если НаименованиеОКВЭД2 <> СокрЛП(Выборка.НаименованиеОКВЭД2) Тогда
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.НаименованиеОКВЭД2 = НаименованиеОКВЭД2;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет поиск организации по ИНН и КПП (если указан).
//
// Параметры:
//   ИНН - Строка - ИНН организации или индивидуального предпринимателя.
//   КПП - Строка - КПП организации.
//   БезОбособленныхПодразделений - Булево - исключает из поиска обособленные подразделения.
//
// Возвращаемое значение:
//   СправочникСсылка.Организации - ссылка на найденную организацию или ПустаяСсылка.
//
Функция НайтиОрганизацию(ИНН, КПП = Неопределено, БезОбособленныхПодразделений = Истина) Экспорт
	
	Если ПустаяСтрока(ИНН) Тогда
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ОператорыЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	ОператорыЗапроса.Отбор.Добавить("Организации.ИНН = &ИНН");
	
	Если КПП <> Неопределено И Не ПустаяСтрока(КПП) Тогда
		ОператорыЗапроса.Отбор.Добавить("Организации.КПП = &КПП");
	КонецЕсли;
	
	Если БезОбособленныхПодразделений Тогда
		ОператорыЗапроса.Отбор.Добавить("НЕ Организации.ОбособленноеПодразделение");
	КонецЕсли;
	
	ОператорыЗапроса.Отбор.Добавить("НЕ Организации.ПометкаУдаления");
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

//-- Локализация

#Область ПодключаемыеКоманды

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	//++ Локализация
	
	Отчеты.УчетныеПолитикиОрганизаций.ДобавитьКомандуОтчета(КомандыОтчетов);
	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытийФормы

// Обработчик события ПриСозданииНаСервере форм элемента справочника Организации.
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//  Отказ                - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ПриСозданииНаСервереФормаЭлемента(Форма, Отказ, СтандартнаяОбработка) Экспорт
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
	//++ Локализация
	Объект = Форма.Объект;
	
	Форма.РегистрацияВНалоговомОргане = Объект.РегистрацияВНалоговомОргане;
	
	Форма.КодОрганаПФР                          = Объект.КодОрганаПФР;
	Форма.НаименованиеТерриториальногоОрганаПФР = Объект.НаименованиеТерриториальногоОрганаПФР;
	Форма.РегистрационныйНомерПФР               = Объект.РегистрационныйНомерПФР;
	Форма.ИПРегистрационныйНомерПФР             = Объект.ИПРегистрационныйНомерПФР;
	

	ЗаполнитьОписанияПараметров(Форма);
	УправлениеФормойНаСервере(Форма);

	//-- Локализация
КонецПроцедуры

// Обработчик события ПриЧтенииНаСервере форм элемента справочника Организации.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - 
//  ТекущийОбъект - СправочникОбъект.Организации -
//
Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	//++ Локализация
	ПрочитатьРегистрацииВНалоговомОргане(ТекущийОбъект, Форма);
	//-- Локализация
	
КонецПроцедуры

// Обработчик события ОбработкаЗаполнения
// 
// Параметры:
// 	ОбъектЗаписи - СправочникОбъект.Организации - записываемый справочник
// 	ДанныеЗаполнения - Произвольный - данные заполнения
// 	СтандартнаяОбработка - Булево - признак стандартной обработки
//
Процедура ОбработкаЗаполненияОрганизации(ОбъектЗаписи, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	//++ Локализация
	Если ЗначениеЗаполнено(ДанныеЗаполнения) И Не ДанныеЗаполнения.Свойство("ВалютаРегламентированногоУчета") Тогда
		ОбъектЗаписи.ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию();
	КонецЕсли;
	//-- Локализация	
КонецПроцедуры

// Вызывается при создании/чтении формы на сервере
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма обработчика
//
Процедура ПриСозданииЧтенииНаСервере(Форма) Экспорт
	//++ Локализация
	
	Форма.НастройкиПодключенияКСервисуИППЗаданы = ПартнерыИКонтрагентыЛокализация.НастройкиПодключенияКСервисуИППЗаданы();
	Форма.ПравоИзмененияОбъекта = ПравоДоступа("Изменение", Метаданные.Справочники.Организации);
	
	ОрганизацииКлиентСерверЛокализация.УправлениеДоступностью(Форма);
	
	//-- Локализация
	
КонецПроцедуры

// Обработчик события ПередЗаписьюНаСервере
// 
// Параметры:
// 	Отказ - Булево -
// 	ТекущийОбъект - СправочникОбъект.Организации -
// 	ПараметрыЗаписи - Структура -
// 	Форма - ФормаКлиентскогоПриложения -
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, Форма) Экспорт
	//++ Локализация
	Если Форма.ДанныеРегистрацийВНалоговыхОрганахИзменены Тогда
		Если Не ЗначениеЗаполнено(Форма.РегистрацияВНалоговомОргане) Тогда
			ТекущийОбъект.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПолучитьСсылку(Новый УникальныйИдентификатор);
		Иначе
			ТекущийОбъект.РегистрацияВНалоговомОргане = Форма.РегистрацияВНалоговомОргане;
		КонецЕсли;
		КПП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.РегистрацияВНалоговомОргане, "КПП");
		Если ЗначениеЗаполнено(КПП)
			И ТекущийОбъект.КПП <> КПП Тогда
			ТекущийОбъект.КПП = КПП;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.ВалютаРегламентированногоУчета) Тогда
		ТекущийОбъект.ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию();
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Обработчик события ПриЗаписиНаСервере
// 
// Параметры:
// 	Отказ - Булево -
// 	ТекущийОбъект - СправочникОбъект.Организации -
// 	ПараметрыЗаписи - Структура -
// 	Форма - ФормаКлиентскогоПриложения -
//
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, Форма) Экспорт
	//++ Локализация
	Если Форма.ДанныеРегистрацийВНалоговыхОрганахИзменены Тогда
		ЗаписатьРегистрациюВНалоговомОргане(Форма, ТекущийОбъект);
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Обработчик события ОбработкаПроверкиЗаполненияНаСервере
// 
// Параметры:
// 	Отказ - Булево - признак отказа.
// 	ПроверяемыеРеквизиты - Массив - массив путей к проверяемым реквизитам.
// 	Форма - ФормаКлиентскогоПриложения - форма обработчика
//
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты, Форма) Экспорт
	//++ Локализация	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ПроверкиВозможностиПримененияПСН(Объект, Отказ);
	
	ПроверяемыйЭлемент = ПроверяемыеРеквизиты.Найти("СтранаРегистрации");
	Если ПроверяемыйЭлемент = Неопределено Тогда
		ПроверяемыеРеквизиты.Добавить("СтранаРегистрации");
	КонецЕсли;
	
	УправлениеПредприятием = НЕ ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
		
	
	//-- Локализация
КонецПроцедуры

// Обработчик события ПослеЗаписиНаСервере
// 
// Параметры:
// 	ТекущийОбъект - СправочникОбъект.Организации -
// 	ПараметрыЗаписи - Структура -
// 	Форма - ФормаКлиентскогоПриложения -
//
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, Форма) Экспорт
	//++ Локализация
	ЗаполнитьОписаниеРегистрацииВНалоговомОргане(Форма);
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Управление формой на сервере.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма справочника Организации
Процедура УправлениеФормойНаСервере(Форма) Экспорт
	//++ Локализация
	ВидОрганизации =  Форма.ВидОрганизации;
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	ТолькоПросмотр = Форма.ТолькоПросмотр;
	
	Если Форма.ВидОрганизации <> "ОбособленноеПодразделение" Тогда
		Элементы.ГруппаОбщиеНастройкиОтступ.Видимость = Ложь;
	Иначе
		Элементы.ВалютаРегламентированногоУчета.Видимость = Ложь;
	КонецЕсли;
	
	УправлениеПредприятием = НЕ ПолучитьФункциональнуюОпцию("УправлениеТорговлей");

	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
				Элементы, 
				"ГруппаОтступКрупнейшийНалогоплательщик",
				"Видимость", 
				УправлениеПредприятием И ВидОрганизации = "ЮридическоеЛицо");
		
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
				Элементы, 
				"КодНалоговогоОрганаПолучателя",
				"Доступность", 
				Объект.КрупнейшийНалогоплательщик);
		
	Если ВидОрганизации = "ОбособленноеПодразделение" Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтраницОсновныхКодов",
																		"ТекущаяСтраница", Элементы.ОсновныеКодыОбособленногоПодразделения);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГоловнаяОрганизация",
																		"ТолькоПросмотр", ЗначениеЗаполнено(Объект.ГоловнаяОрганизация));
	ИначеЕсли ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтраницОсновныхКодов",
																		"ТекущаяСтраница", Элементы.ОсновныеКодыИндивидуальногоПредпринимателя);
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтраницОсновныхКодов",
																		"ТекущаяСтраница", Элементы.ОсновныеКодыЮрЛица);
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ГруппаСвидетельствоИП, СвидетельствоСерияНомер, СвидетельствоДатаВыдачи, ДекорацияРегНомерИП, ДекорацияДействуетСИП",
																	"Видимость", (ВидОрганизации = "ИндивидуальныйПредприниматель"));
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию",
																	"Видимость", (ВидОрганизации = "ОбособленноеПодразделение"));
	
	Если ВидОрганизации = "ЮридическоеЛицо" Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИНН",
																		"Маска", "9999999999");
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОГРН",
																		"Маска", "9999999999999");
	КонецЕсли;
	
	Если НЕ УправлениеПредприятием Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
				Элементы, 
				"ПоказатьИсториюИзмененийРегистрацииВНалоговомОргане, ЛокализацияГруппаРегистрационныеДанные, ГруппаТерриториальныеУсловияГрафикРаботыОтступ, ГруппаКадровыйУчетИРасчетЗарплатыОтступ, ГруппаБухучетИВыплатаЗарплатыОтступ, ГруппаВоинскийУчетОтступ, ГруппаРезервыОтпусковОтступ",
				"Видимость", 
				Ложь);
	КонецЕсли;
	
	ДоступностьКнопкиРегистрацииВНалоговомОргане = ПравоДоступа("Изменение", Метаданные.Справочники.РегистрацииВНалоговомОргане);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ГиперссылкаРегистрацияВНалоговыхОрганах",
																	"Доступность", ДоступностьКнопкиРегистрацииВНалоговомОргане);
	ДоступностьИзмененияУчетнойПолитикиИНалогов = 
								ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиСистемыНалогообложения)
								ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПримененияЕНВД);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ГруппаУчетнаяПолитикаИДругиеНастройки",
																	"Доступность", ДоступностьИзмененияУчетнойПолитикиИНалогов, Истина);
																	
	
	
	УстановитьСвойстваУчетнойПолитикиИНалогов(Форма);
	
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, 
			"ГруппаПроверки",
			"Доступность", 
			ПравоДоступа("Изменение", Метаданные.Справочники.Организации));
			
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ЛокализацияГруппаРегистрацияВНалоговыхОрганах",
				"Видимость",
				Ложь);
	КонецЕсли;

	НастроитьТаблицуПримененияЕНВД(Форма);
	НастроитьТаблицуПримененияПСН(Форма);
	
	НеУправленческаяОрганизация = Объект.Ссылка <> Справочники.Организации.УправленческаяОрганизация;
	Элементы.ВидОрганизации.Видимость                          = НеУправленческаяОрганизация;
	Элементы.ГиперссылкаРегистрацияВНалоговыхОрганах.Видимость = НеУправленческаяОрганизация;
	Элементы.ИНН.Видимость                                     = НеУправленческаяОрганизация;
	Элементы.ЗаполнитьПоИНН.Видимость                          = НеУправленческаяОрганизация;
	Элементы.КПП.Видимость                                     = НеУправленческаяОрганизация;
	Элементы.КодОКВЭД.Видимость                                = НеУправленческаяОрганизация;
	Элементы.КодОКВЭД2.Видимость                               = НеУправленческаяОрганизация;
	Элементы.КодПоОКПО.Видимость                               = НеУправленческаяОрганизация;
	Элементы.ОГРН.Видимость                                    = НеУправленческаяОрганизация;
	Элементы.ДатаРегистрации.Видимость                         = НеУправленческаяОрганизация;
	Элементы.ОтступКрупнейшийНалогоплательщик.Видимость        = НеУправленческаяОрганизация;
	Элементы.КрупнейшийНалогоплательщик.Видимость              = НеУправленческаяОрганизация;
	Элементы.КодНалоговогоОрганаПолучателя.Видимость           = НеУправленческаяОрганизация;
	Элементы.ИсторияКППЮрЛица.Видимость                        = НеУправленческаяОрганизация;
	Элементы.ИсторияКППОбособленногоПодразделения.Видимость    = НеУправленческаяОрганизация;
	Элементы.ФормаРеквизиты.Видимость                          = НеУправленческаяОрганизация;
	ВидимостьКомандПомощникаКопированияНастроек = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") 
												И ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.УчетнаяПолитикаФинансовогоУчета);
												
	Элементы.ЛокализацияГруппаКопированиеНастроек.Видимость = ВидимостьКомандПомощникаКопированияНастроек;
	Элементы.СкопироватьНастройкиУчетаИз.Видимость = ВидимостьКомандПомощникаКопированияНастроек;
	Элементы.СкопироватьНастройкиУчетаВсе.Видимость = ВидимостьКомандПомощникаКопированияНастроек;
	
	НастроитьПредставлениеИсторииКПП(Форма);
	//-- Локализация
	
КонецПроцедуры

Процедура УчетнаяПолитикаПриИзмененииСервер(Форма) Экспорт
	//++ Локализация
	НастроитьТаблицуПримененияЕНВД(Форма);
	НастроитьТаблицуПримененияПСН(Форма);
	УстановитьСвойстваУчетнойПолитикиИНалогов(Форма);
	//-- Локализация
КонецПроцедуры

// При окончании изменения реквизита.
// 
// Параметры:
//  ИмяЭлемента - Строка - Имя элемента
//  Форма - ФормаКлиентскогоПриложения - Форма справочника Организации
//  ПараметрыОбработки - Структура - Параметры обработки
Процедура ПриОкончанииИзмененияРеквизита(ИмяЭлемента, Форма, ПараметрыОбработки) Экспорт
	Если ТипЗнч(ИмяЭлемента) = Тип("Массив") Тогда
		Для каждого ТекЭлемент Из ИмяЭлемента Цикл
			ПриОкончанииИзмененияРеквизита(ТекЭлемент, Форма, ПараметрыОбработки);
		КонецЦикла;
	КонецЕсли;
	//++ Локализация
	Если ИмяЭлемента = "ВидОрганизации" Тогда
		ИзменитьВидОрганизацииНаСервере(Форма);
	КонецЕсли;
	Если ИмяЭлемента = "ГоловнаяОрганизация" Тогда
		ЗаполнитьОписаниеДействующихПараметровУчетныхПолитикПриИзмененииГоловнойОрганизации(Форма);
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Выполнить команду локализации.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ИмяКоманды - Произвольный - Имя команды
//  ПараметрыОбработки - Структура - Параметры обработки
Процедура ВыполнитьКомандуЛокализации(Форма, ИмяКоманды, ПараметрыОбработки) Экспорт
	
	Если ТипЗнч(ИмяКоманды) = Тип("Массив") Тогда
		Для каждого ТекЭлемент Из ИмяКоманды Цикл
			ВыполнитьКомандуЛокализации(Форма, ТекЭлемент, ПараметрыОбработки);
		КонецЦикла;
	КонецЕсли;
	//++ Локализация	
	Если ИмяКоманды = "ЗаполнитьОписаниеРегистрацииВНалоговомОргане"
	Тогда
		ЗаполнитьОписанияПараметров(Форма, ИмяКоманды);
	КонецЕсли;
	Если ИмяКоманды = "ЗаполнитьОписанияПараметров" Тогда
		ЗаполнитьОписанияПараметров(Форма);
	КонецЕсли;
	Если ИмяКоманды = "ВосстановитьДанныеРегистрацийВНалоговыхОрганах" Тогда
		ВосстановитьДанныеРегистрацийВНалоговыхОрганах(Форма);
	КонецЕсли;
	Если ИмяКоманды = "ВосстановитьДанныеРегистрацийВПФР" Тогда
		ВосстановитьДанныеРегистрацийВПФР(Форма);
	КонецЕсли;
	Если ИмяКоманды = "УстановитьСвойстваУчетнойПолитикиИНалогов" Тогда
		УстановитьСвойстваУчетнойПолитикиИНалогов(Форма);
	КонецЕсли;
	Если ИмяКоманды = "НастроитьТаблицуПримененияЕНВД" Тогда
		НастроитьТаблицуПримененияЕНВД(Форма);
	КонецЕсли;
	Если ИмяКоманды = "НастроитьТаблицуПримененияПСН" Тогда
		НастроитьТаблицуПримененияПСН(Форма);
	КонецЕсли;
	Если ИмяКоманды = "ЗаписатьРегистрациюВНалоговомОргане" Тогда
		ЗаписатьРегистрациюВНалоговомОргане(Форма);
	КонецЕсли;
	Если ИмяКоманды = "ОбновитьРегистрацииВНалоговомОрганеПослеРедактирования" Тогда
		ОбновитьРегистрацииВНалоговомОрганеПослеРедактирования(ПараметрыОбработки, Форма);
	КонецЕсли;
	Если ИмяКоманды = "ОбновитьКПППослеРедактированияРегистрацииВНалоговомОргане" Тогда
		ОбновитьКПППослеРедактированияРегистрацииВНалоговомОргане(ПараметрыОбработки, Форма);
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиМодуляОбъекта


// Обработчик ПередЗаписью
//
// Параметры:
// 	Объект - СправочникОбъект.Организации - 
// 	Отказ - Булево - 
//
Процедура ПередЗаписью(Объект, Отказ) Экспорт
	
	//++ Локализация


	//-- Локализация
	
КонецПроцедуры

// Обработчик события ПриЗаписи
// 
// Параметры:
// 	ОбъектЗаписи - СправочникОбъект.Организации - записываемый справочник
// 	Отказ - Булево - Признак отказа
//
Процедура ПриЗаписиОрганизации(ОбъектЗаписи, Отказ) Экспорт 
	//++ Локализация
	
	
	Если ЗначениеЗаполнено(ОбъектЗаписи.РегистрацияВНалоговомОргане)
		И ОбъектЗаписи.КПП <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектЗаписи.РегистрацияВНалоговомОргане, "КПП") Тогда
		РегистрацияВНалоговомОрганеОбъект = ОбъектЗаписи.РегистрацияВНалоговомОргане.ПолучитьОбъект();
		Если РегистрацияВНалоговомОрганеОбъект <> Неопределено Тогда 
			РегистрацияВНалоговомОрганеОбъект.КПП = ОбъектЗаписи.КПП;
			РегистрацияВНалоговомОрганеОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	СинхронизироватьНастройкиОбособленныхПодразделений(ОбъектЗаписи, Отказ);
	//-- Локализация
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(ОрганизацияОбъект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	
	Перем ТекстСообщения;
	
	Если ЗначениеЗаполнено(ОрганизацияОбъект.ОГРН)
	 И Не РегламентированныеДанныеКлиентСервер.ОГРНСоответствуетТребованиям(ОрганизацияОбъект.ОГРН,
		ПартнерыИКонтрагенты.ЭтоЮрЛицо(ОрганизацияОбъект.ЮрФизЛицо),
		ТекстСообщения) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОрганизацияОбъект, "ОГРН",, Отказ);
		
	КонецЕсли;
	
	ПроверяемыйЭлемент = ПроверяемыеРеквизиты.Найти("ВалютаРегламентированногоУчета");
	Если ПроверяемыйЭлемент <> Неопределено Тогда
		 ПроверяемыеРеквизиты.Удалить(ПроверяемыйЭлемент);
	КонецЕсли;
	
	ПроверяемыйЭлемент = ПроверяемыеРеквизиты.Найти("СтранаРегистрации");
	Если ПроверяемыйЭлемент = Неопределено Тогда
		ПроверяемыеРеквизиты.Добавить("СтранаРегистрации");
	КонецЕсли;
	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеСлужебныеМетоды

Процедура УстановитьПараметрыЗапросаПриОбработкеПолученияДанныхВыбора(Параметры, Запрос) Экспорт

	//++ Локализация
	
	
	//-- Локализация
	
КонецПроцедуры

Процедура ДополнитьСоответствиеЭлементовФормыПараметрамНалоговУчетныхПолитик(СоответствиеЭлементов) Экспорт
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ГруппаНастройкиСистемыНалогообложенияОтступ");
	МассивЭлементов.Добавить("ОтступНастройкиСистемыНалогообложения");
	МассивЭлементов.Добавить("ГруппаНастройкиСистемыНалогообложения");
	МассивЭлементов.Добавить("ОписаниеНастройкиСистемыНалогообложения");
	МассивЭлементов.Добавить("ОткрытьНастройкиСистемыНалогообложения");

	СтруктураЭлементов = Новый Структура();
	СтруктураЭлементов.Вставить("МассивЭлементов", МассивЭлементов);
	СтруктураЭлементов.Вставить("ЭлементОписание", "ОписаниеНастройкиСистемыНалогообложения");
		
	СоответствиеЭлементов.Вставить("НастройкиСистемыНалогообложения", СтруктураЭлементов);
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ГруппаУчетнаяПолитикаБухУчетаОтступ");
	МассивЭлементов.Добавить("ОтступУчетнаяПолитикаБухУчета");
	МассивЭлементов.Добавить("ГруппаУчетнаяПолитикаБухУчета");
	МассивЭлементов.Добавить("ОписаниеУчетнаяПолитикаБухУчета");
	МассивЭлементов.Добавить("ОткрытьУчетнаяПолитикаБухУчета");
	
	СтруктураЭлементов = Новый Структура();
	СтруктураЭлементов.Вставить("МассивЭлементов", МассивЭлементов);
	СтруктураЭлементов.Вставить("ЭлементОписание", "ОписаниеУчетнаяПолитикаБухУчета");
	
	СоответствиеЭлементов.Вставить("УчетнаяПолитикаБухУчета", СтруктураЭлементов);

	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ГруппаНастройкиУчетаНалогаНаПрибыльОтступ");
	МассивЭлементов.Добавить("ОтступНастройкиУчетаНалогаНаПрибыль");
	МассивЭлементов.Добавить("ГруппаНастройкиУчетаНалогаНаПрибыль");
	МассивЭлементов.Добавить("ОписаниеНастройкиУчетаНалогаНаПрибыль");
	МассивЭлементов.Добавить("ОткрытьНастройкиУчетаНалогаНаПрибыль");
	
	СтруктураЭлементов = Новый Структура();
	СтруктураЭлементов.Вставить("МассивЭлементов", МассивЭлементов);
	СтруктураЭлементов.Вставить("ЭлементОписание", "ОписаниеНастройкиУчетаНалогаНаПрибыль");
		
	СоответствиеЭлементов.Вставить("НастройкиУчетаНалогаНаПрибыль", СтруктураЭлементов);

	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ГруппаНастройкиУчетаУСНОтступ");
	МассивЭлементов.Добавить("ОтступНастройкиУчетаУСН");
	МассивЭлементов.Добавить("ГруппаНастройкиУчетаУСН");
	МассивЭлементов.Добавить("ОписаниеНастройкиУчетаУСН");
	МассивЭлементов.Добавить("ОткрытьНастройкиУчетаУСН");

	СтруктураЭлементов = Новый Структура();
	СтруктураЭлементов.Вставить("МассивЭлементов", МассивЭлементов);
	СтруктураЭлементов.Вставить("ЭлементОписание", "ОписаниеНастройкиУчетаУСН");
		
	СоответствиеЭлементов.Вставить("НастройкиУчетаУСН", СтруктураЭлементов);
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ГруппаИмущественныеНалогиОтступ");
	МассивЭлементов.Добавить("ОтступИмущественныеНалоги");
	МассивЭлементов.Добавить("ГруппаИмущественныеНалоги");
	МассивЭлементов.Добавить("ОписаниеСтавкиНалогаНаИмущество");
	МассивЭлементов.Добавить("ОткрытьСтавкаНалогаНаИмущество");
	МассивЭлементов.Добавить("ГруппаОсновныеСредства");
	МассивЭлементов.Добавить("ДекорацияСтавкаНалогаНаИмуществоОсновныеСредства");
	МассивЭлементов.Добавить("УстановитьПорядокУплатыНалоговНаМестах");
	
	СтруктураЭлементов = Новый Структура();
	СтруктураЭлементов.Вставить("МассивЭлементов", МассивЭлементов);
	СтруктураЭлементов.Вставить("ЭлементОписание", "ОписаниеСтавкиНалогаНаИмущество");
	
	СоответствиеЭлементов.Вставить("СтавкиНалогаНаИмущество", СтруктураЭлементов);
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеДействующихПараметровУчетныхПолитикПриИзмененииГоловнойОрганизации(Форма, ИмяРегистра = "") Экспорт
	СоответствиеЭлементов = Справочники.Организации.СоответствиеЭлементовФормыПараметрамНалоговУчетныхПолитик();
	НастройкиНалоговУчетныхПолитик.УправлениеВидимостьюЭлементовУчетныхПолитик(Форма, СоответствиеЭлементов, Форма.Объект.ГоловнаяОрганизация);
	НастройкиНалоговУчетныхПолитик.ЗаполнитьОписаниеДействующихПараметров(Форма, Форма.Объект.ГоловнаяОрганизация, ИмяРегистра);
	ОрганизацииЛокализация.УчетнаяПолитикаПриИзмененииСервер(Форма);
КонецПроцедуры

//++ Локализация

Функция ИзменитьИНН(СсылкаНаОбъект) Экспорт
	ИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ИНН");
	Возврат ИНН
КонецФункции

Функция РегистрацииВНалоговыхОрганахВХранилище(ОбъектСсылка, УникальныйИдентификатор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрацииВНалоговомОргане.Подразделение,
	|	РегистрацииВНалоговомОргане.Организация,
	|	РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.РегистрацииВНалоговомОргане.СрезПоследних(
	|		, Организация = &Организация) КАК РегистрацииВНалоговомОргане
	|;
	|";
	
	Запрос.УстановитьПараметр("Организация", ОбъектСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Регистрации = Новый Структура();
	
	Регистрации.Вставить("РегистрацииВНалоговомОргане",                     Результат[0].Выгрузить());
	
	
	РегистрацииСохраненныеЗначения = ПоместитьВоВременноеХранилище(Регистрации, УникальныйИдентификатор);
	Возврат РегистрацииСохраненныеЗначения
	
КонецФункции
//-- Локализация

Функция ВозможнаРегистрацияДляОбособленныхПодразделений() Экспорт
	//++ Локализация
	Возврат Справочники.РегистрацииВНалоговомОргане.ВозможнаРегистрацияДляОбособленныхПодразделений();
	//-- Локализация
	Возврат Ложь
КонецФункции


#КонецОбласти

#КонецОбласти

//++ Локализация

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытийЭлементовШапкиФормы_Служебные

Процедура ИзменитьВидОрганизацииНаСервере(Форма)
	Объект = Форма.Объект;
	Если Форма.ВидОрганизации = "ЮридическоеЛицо" Тогда
		Объект.СвидетельствоДатаВыдачи = Неопределено;
		Объект.СвидетельствоСерияНомер = "";
	ИначеЕсли Форма.ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		Объект.ИНН = "";
		Объект.КПП = "";
	ИначеЕсли Форма.ВидОрганизации = "ОбособленноеПодразделение" Тогда
		Объект.СвидетельствоДатаВыдачи = Неопределено;
		Объект.СвидетельствоСерияНомер = "";
	Иначе
		ВызватьИсключение Нстр("ru = 'Произошла ошибка при изменении типа организации. Обратитесь к администратору.'");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

Процедура НастроитьТаблицуПримененияЕНВД(Форма)
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРозничныеПродажи")
		И Форма.ВидОрганизации <> "ОбособленноеПодразделение" Тогда
	
		Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПримененияЕНВД) Тогда
			Форма.Элементы.ГруппаОтступПрименениеЕНВД.Видимость = Ложь;
		ИначеЕсли НЕ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПримененияЕНВД) Тогда
			Форма.Элементы.ГруппаОтступПрименениеЕНВД.Доступность = Ложь;
			ОбновитьСсылкуПримененияЕНВД(Форма);
		Иначе
			ОбновитьСсылкуПримененияЕНВД(Форма);
		КонецЕсли;

	Иначе
		Форма.Элементы.ГруппаОтступПрименениеЕНВД.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьСсылкуПримененияЕНВД(Форма)
	ЕстьПравоНаИзменение = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПримененияЕНВД);
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Склады.Ссылка), 0) КАК КоличествоСкладов,
	|	СУММА(ВЫБОР
	|		КОГДА ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД = ИСТИНА ТОГДА
	|			1
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ) КАК КоличествоСкладовЕНВД
	|ИЗ
	|	Справочник.Склады КАК Склады
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПримененияЕНВД.СрезПоследних(&ТекущаяДата, Организация = &ГоловнаяОрганизация) КАК ПримененияЕНВД
	|		ПО Склады.Ссылка = ПримененияЕНВД.Склад
	|ГДЕ
	|	Склады.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)");
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", Форма.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЕстьПравоНаИзменение Тогда
			ТекстоваяСтрока = НСтр("ru ='Настроить применение ЕНВД (%КоличествоСкладовЕНВД% из %КоличествоСкладов%)'");
		Иначе
			ТекстоваяСтрока = НСтр("ru ='Просмотреть применение ЕНВД (%КоличествоСкладов%)'");
		КонецЕсли;
		ТекстоваяСтрока = СтрЗаменить(ТекстоваяСтрока, "%КоличествоСкладов%", Выборка.КоличествоСкладов);
		ТекстоваяСтрока = СтрЗаменить(ТекстоваяСтрока, "%КоличествоСкладовЕНВД%", Выборка.КоличествоСкладовЕНВД);
		Форма.СтрокаЕНВД = Новый ФорматированнаяСтрока(ТекстоваяСтрока, , , , "НастроитьТаблицуПримененияЕНВД");
	Иначе
		Форма.СтрокаЕНВД = Новый ФорматированнаяСтрока(НСтр("ru='Нет информации о применении ЕНВД.'"));
	КонецЕсли;
КонецПроцедуры

Процедура НастроитьТаблицуПримененияПСН(Форма)
	
	Организация = Форма.Объект.Ссылка;
		
	Если Форма.ВидОрганизации = "ИндивидуальныйПредприниматель"
		И НастройкиНалоговУчетныхПолитикЛокализация.ОрганизацияПрименяетПатенты(Организация) Тогда
		
		СписокПатентовОрганизации = Справочники.Патенты.ПолучитьПатентыПоОрганизации(Организация, Неопределено);
		СписокДействующихПатентовОрганизации = Справочники.Патенты.ПолучитьДействующиеПатентыНаДату(Организация, Неопределено);
		СтрокаПСН = СтрШаблон(НСтр("ru='Патенты (%1 из %2)'"), СписокДействующихПатентовОрганизации.Количество(), СписокПатентовОрганизации.Количество());
		Форма.СтрокаПСН = Новый ФорматированнаяСтрока(СтрокаПСН, , , , "НастроитьТаблицуПримененияПСН");
		
	Иначе
		Форма.СтрокаПСН = Новый ФорматированнаяСтрока(НСтр("ru='Нет информации о применении ПСН.'"));
	КонецЕсли;
	
КонецПроцедуры


Процедура СинхронизироватьНастройкиОбособленныхПодразделений(ОбъектЗаписи, Отказ)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ОбособленноеПодразделение
		|	И Организации.ГоловнаяОрганизация = &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка", ОбъектЗаписи.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			
			ТекстОшибки = НСтр("ru='Не удалось заблокировать %Элемент%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Элемент%",        Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Отказ);
			
		КонецПопытки;
			
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ИНН = ОбъектЗаписи.ИНН;
		Объект.КПП = ОбъектЗаписи.КПП;
		Объект.ЮрФизЛицо = ОбъектЗаписи.ЮрФизЛицо;
		Объект.КрупнейшийНалогоплательщик = ОбъектЗаписи.КрупнейшийНалогоплательщик;
		Объект.КодНалоговогоОрганаПолучателя = ОбъектЗаписи.КодНалоговогоОрганаПолучателя;
		
		Попытка
			
			Объект.Записать();
			
		Исключение
			
			ТекстОшибки = НСтр("ru='Не удалось записать %Элемент%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Элемент%",        Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Отказ);
			
		КонецПопытки
		
	КонецЦикла;
	
	Если ОбъектЗаписи.ОбособленноеПодразделение Тогда
		
		// Синхронизация настроек ЕНВД
		
		НастройкиГоловнойОрганизации = РегистрыСведений.ПримененияЕНВД.СоздатьНаборЗаписей();
		НастройкиГоловнойОрганизации.Отбор.Организация.Установить(ОбъектЗаписи.ГоловнаяОрганизация);
		НастройкиГоловнойОрганизации.Прочитать();
		
		НастройкиОбособленногоПодразделения = НастройкиГоловнойОрганизации;
		НастройкиОбособленногоПодразделения.Отбор.Организация.Установить(ОбъектЗаписи.Ссылка);
		Для Каждого НастройкаОбособленногоПодразделения Из НастройкиОбособленногоПодразделения Цикл
			НастройкаОбособленногоПодразделения.Организация = ОбъектЗаписи.Ссылка;
		КонецЦикла;
		
		Попытка
			
			НастройкиОбособленногоПодразделения.ДополнительныеСвойства.Вставить("СинхронизацияНастроек", Истина);
			НастройкиОбособленногоПодразделения.Записать();
			
		Исключение
			
			ТекстОшибки = НСтр("ru='Не удалось изменить настройки применения ЕНВД. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Отказ);
			
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьДанныеРегистрацийВНалоговыхОрганах(Форма)
	
	Если Не ЗначениеЗаполнено(Форма.РегистрацииСохраненныеЗначения) Тогда
		Возврат;
	КонецЕсли;
	
	Регистрации = ПолучитьИзВременногоХранилища(Форма.РегистрацииСохраненныеЗначения);
	
	Форма.Объект.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(Форма.Объект.Ссылка);
	Форма.РегистрацияВНалоговомОргане = Форма.Объект.РегистрацияВНалоговомОргане;
	ЗаполнитьОписанияПараметров(Форма, "ЗаполнитьОписаниеРегистрацииВНалоговомОргане");
КонецПроцедуры

Процедура ВосстановитьДанныеРегистрацийВПФР(Форма)
	
	
	Возврат; // в УТ11 не используется
	
КонецПроцедуры


Процедура УстановитьСвойстваУчетнойПолитикиИНалогов(Форма)
	Элементы = Форма.Элементы;
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		Элементы.ГруппаИмущественныеНалогиОтступ.Видимость = Ложь;
		Элементы.ДекорацияСтавкаНалогаНаИмуществоОсновныеСредства.Видимость = Ложь;
		Элементы.УстановитьПорядокУплатыНалоговНаМестах.Видимость = Ложь;
	КонецЕсли;
	
	ДействующиеНалоги = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату(
		"НастройкиСистемыНалогообложения",
		Форма.Объект.Ссылка);
	ПрименяетсяЕНВД = Ложь;
	ПрименяетсяПСН = Ложь;
	Если ЗначениеЗаполнено(ДействующиеНалоги) Тогда
		ПрименяетсяЕНВД = ДействующиеНалоги.ПрименяетсяЕНВД;
		ПрименяетсяПСН = ДействующиеНалоги.ПрименяетсяПСН;
	КонецЕсли;
	Элементы.ГруппаПеременнойДоступности.Доступность  		  = (Форма.ВидОрганизации <> "ОбособленноеПодразделение");
	Элементы.ЛокализацияГруппаКопированиеНастроек.Доступность = (Форма.ВидОрганизации <> "ОбособленноеПодразделение");
	Элементы.ДекорацияПредупреждениеЕНВД.Видимость 	  		  = (Форма.ВидОрганизации = "ОбособленноеПодразделение") И ПрименяетсяЕНВД;
	Элементы.ДекорацияПредупреждениеУчетнаяПолитика.Видимость = (Форма.ВидОрганизации = "ОбособленноеПодразделение");
	Элементы.ГруппаОтступПрименениеЕНВД.Видимость 	  		  = ПрименяетсяЕНВД;
	Элементы.ГруппаОтступПрименениеПСН.Видимость              = (Форма.ВидОрганизации = "ИндивидуальныйПредприниматель") И ПрименяетсяПСН;
	

КонецПроцедуры

#Область ЗаполнениеОписаний

Процедура ЗаполнитьОписанияПараметров(Форма, ИмяОписания = "")
	
	ЗаполнитьОписаниеРегистрацииВНалоговомОргане(Форма);
	
КонецПроцедуры


//
//	Параметры:
//		ОбъектЗаписи - СправочникОбъект.Организации
//		Отказ - Булево
Процедура ПроверкиВозможностиПримененияПСН(ОбъектЗаписи, Отказ)
	
	Если Не ОбъектЗаписи.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель")
		И УчетнаяПолитика.ПрименяетсяПСН(ОбъектЗаписи.Ссылка, ТекущаяДатаСеанса()) Тогда
			ТекстОшибки = НСтр("ru = 'В учетной политике установлено использование ПСН. Применение патента доступно только для индивидуальных предпринимателей.'");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,,Отказ);
			
			Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеРегистрацииВНалоговомОргане(Форма, ИмяОписания = "", ЗаполнятьДанныеРегистрацииНО = Ложь)
	
	Если ЗначениеЗаполнено(ИмяОписания)
		И ИмяОписания <> "ЗаполнитьОписаниеРегистрацииВНалоговомОргане" Тогда
		
		Возврат
		
	КонецЕсли;
	
	ПравоЧтения = ПравоДоступа("Чтение", Метаданные.Справочники.РегистрацииВНалоговомОргане);
	
	КоличествоНалоговыхОрганов = 0;
	
	Если ПравоЧтения Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Регистрация.РегистрацияВНалоговомОргане) КАК КоличествоНалоговыхОрганов
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОбособленныеПодразделения.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
		|	ИЗ
		|		РегистрСведений.РегистрацииВНалоговомОргане.СрезПоследних(
		|			, Организация.ОбособленноеПодразделение И Организация = &Организация) КАК ОбособленныеПодразделения
		|	ГДЕ
		|		ОбособленныеПодразделения.РегистрацияВНалоговомОргане <> &РегистрацияВНалоговомОргане
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
		|	ИЗ
		|		РегистрСведений.РегистрацииВНалоговомОргане.СрезПоследних(
		|			, Организация.ОбособленноеПодразделение И Организация.ГоловнаяОрганизация = &Организация) КАК РегистрацииВНалоговомОргане
		|	ГДЕ
		|		РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане <> &РегистрацияВНалоговомОргане
		|
		|	) КАК Регистрация");
		
		Запрос.УстановитьПараметр("Организация", Форма.Объект.Ссылка);
		Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", Форма.РегистрацияВНалоговомОргане);
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		Если Выборка.Следующий() Тогда
			КоличествоНалоговыхОрганов = Выборка.КоличествоНалоговыхОрганов;
		Иначе
			КоличествоНалоговыхОрганов = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.РегистрацияВНалоговомОргане) Тогда
		
		ОписаниеРегистрацииВНалоговыхОрганах = НСтр("ru = 'Организация состоит на учете в налоговом органе:'")
			+ " %РегистрацияВНалоговомОргане%.";
		ОписаниеРегистрацииВНалоговыхОрганах = СтрЗаменить(
			ОписаниеРегистрацииВНалоговыхОрганах,
			"%РегистрацияВНалоговомОргане%",
			Форма.РегистрацияВНалоговомОргане);
		
		Если ЗаполнятьДанныеРегистрацииНО Тогда
			РеквизитыНО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Форма.РегистрацияВНалоговомОргане, "Код, НаименованиеИФНС");
			Форма.Объект.КодНалоговогоОргана 			= РеквизитыНО.Код;
			Форма.Объект.НаименованиеНалоговогоОргана = РеквизитыНО.НаименованиеИФНС;
		КонецЕсли;
		
	Иначе
		
		ОписаниеРегистрацииВНалоговыхОрганах = НСтр("ru = 'Организация не состоит на учете в налоговом органе.'");
		
		Если ЗаполнятьДанныеРегистрацииНО Тогда
			Форма.Объект.КодНалоговогоОргана 			= "";
			Форма.Объект.НаименованиеНалоговогоОргана = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Если КоличествоНалоговыхОрганов > 0 Тогда
		ОписаниеРегистрацииВНалоговыхОрганах = ОписаниеРегистрацииВНалоговыхОрганах
			+ " " + НСтр("ru = 'Обособленные подразделения состоят на учете в'") + " %КоличествоНалоговыхОрганов% ";
		ОписаниеРегистрацииВНалоговыхОрганах = СтрЗаменить(
			ОписаниеРегистрацииВНалоговыхОрганах,
			"%КоличествоНалоговыхОрганов%",
			Формат(КоличествоНалоговыхОрганов,"ЧГ=0"));
		Если КоличествоНалоговыхОрганов <> 11 И Прав(Строка(КоличествоНалоговыхОрганов), 1) = "1" Тогда
			ОписаниеРегистрацииВНалоговыхОрганах = ОписаниеРегистрацииВНалоговыхОрганах + НСтр("ru = 'налоговом органе.'");
		Иначе
			ОписаниеРегистрацииВНалоговыхОрганах = ОписаниеРегистрацииВНалоговыхОрганах + НСтр("ru = 'налоговых органах.'");
		КонецЕсли;
	КонецЕсли;
	
	Форма.Элементы.ГиперссылкаРегистрацияВНалоговыхОрганах.РасширеннаяПодсказка.Заголовок = ОписаниеРегистрацииВНалоговыхОрганах;
	
КонецПроцедуры


#КонецОбласти

#Область РегистрацииВНалоговомОргане

Процедура НастроитьПредставлениеИсторииКПП(Форма)
	
	ПредставлениеИстории = Новый Структура();
	ПредставлениеИстории.Вставить("Заголовок", НСтр("ru = 'История'"));
	ПредставлениеИстории.Вставить("Доступность", Истина);
	
	КоличествоЗаписейИстории = Форма.РегистрацииВНалоговомОрганеНаборЗаписей.Количество();
	
	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		ПредставлениеИстории.Доступность = Ложь;
	ИначеЕсли Форма.РегистрацииВНалоговомОрганеНаборЗаписей.Количество() > 0 Тогда
		АктуальнаяЗапись = Форма.РегистрацииВНалоговомОрганеНаборЗаписей[КоличествоЗаписейИстории - 1];
		ПредставлениеИстории.Заголовок = СтрШаблон(НСтр("ru = 'Действует с %1'"), Формат(АктуальнаяЗапись.Период, "ДЛФ=D;"));
		ПредставлениеИстории.Доступность = Истина;
	КонецЕсли;
	
	Форма.Элементы.ИсторияКППЮрЛица.Заголовок = ПредставлениеИстории.Заголовок;
	Форма.Элементы.ИсторияКППЮрЛица.Доступность = ПредставлениеИстории.Доступность;
	Форма.Элементы.ИсторияКППОбособленногоПодразделения.Заголовок = ПредставлениеИстории.Заголовок;
	Форма.Элементы.ИсторияКППОбособленногоПодразделения.Доступность = ПредставлениеИстории.Доступность;
	
КонецПроцедуры

Процедура ЗаписатьРегистрацииВНалоговомОргане(ТекущийОбъект, Отказ, Форма)
	
	РегистрацииВФорме = Форма.РегистрацииВНалоговомОрганеНаборЗаписей.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РегистрацииВФорме", РегистрацииВФорме);
	Запрос.УстановитьПараметр("Организация", ТекущийОбъект.Ссылка);
	Запрос.УстановитьПараметр("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрацииВНалоговомОргане.Организация					КАК Организация,
	|	РегистрацииВНалоговомОргане.Подразделение				КАК Подразделение,
	|	РегистрацииВНалоговомОргане.Период						КАК Период,
	|	РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ РегистрацииВФорме
	|ИЗ
	|	&РегистрацииВФорме КАК РегистрацииВНалоговомОргане
	|;
	|///////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	РегистрацииВФорме.Период						КАК Период,
	|	РегистрацииВФорме.Организация					КАК Организация,
	|	РегистрацииВФорме.Подразделение					КАК Подразделение,
	|	РегистрацииВФорме.РегистрацияВНалоговомОргане	КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрацииВФорме КАК РегистрацииВФорме
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|		ПО РегистрацииВФорме.Период = РегистрацииВНалоговомОргане.Период
	|			И РегистрацииВФорме.Организация = РегистрацииВНалоговомОргане.Организация
	|			И РегистрацииВФорме.Подразделение = РегистрацииВНалоговомОргане.Подразделение
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Период Есть NULL
	|;
	|///////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	РегистрацииВНалоговомОргане.Период						КАК Период,
	|	РегистрацииВНалоговомОргане.Организация					КАК Организация,
	|	РегистрацииВНалоговомОргане.Подразделение				КАК Подразделение,
	|	РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане	КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрацииВФорме КАК РегистрацииВФорме
	|		ПО РегистрацииВНалоговомОргане.Период = РегистрацииВФорме.Период
	|			И РегистрацииВНалоговомОргане.Организация = РегистрацииВФорме.Организация
	|			И РегистрацииВНалоговомОргане.Подразделение = РегистрацииВФорме.Подразделение
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Организация = &Организация
	|	И РегистрацииВНалоговомОргане.Подразделение = &Подразделение
	|	И РегистрацииВФорме.Период Есть NULL";
	
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Если Не МассивРезультатов[1].Пустой() Тогда
		Отбор = МассивРезультатов[1].Выбрать();
		Пока Отбор.Следующий() Цикл
			Запись = РегистрыСведений.РегистрацииВНалоговомОргане.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Отбор);
			Запись.Записать();
		КонецЦикла;
	КонецЕсли;
	Если Не МассивРезультатов[2].Пустой() Тогда
		Отбор = МассивРезультатов[2].Выбрать();
		Пока Отбор.Следующий() Цикл
			Запись = РегистрыСведений.РегистрацииВНалоговомОргане.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Отбор);
			Запись.Удалить();
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьРегистрацииВНалоговомОргане(ТекущийОбъект, Форма)
	
	РегистрацииВНалоговомОргане = РегистрыСведений.РегистрацииВНалоговомОргане.СоздатьНаборЗаписей();
	РегистрацииВНалоговомОргане.Отбор.Организация.Установить(ТекущийОбъект.Ссылка);
	РегистрацииВНалоговомОргане.Отбор.Подразделение.Установить(Справочники.СтруктураПредприятия.ПустаяСсылка());
	РегистрацииВНалоговомОргане.Прочитать();
	
	Форма.РегистрацииВНалоговомОрганеНаборЗаписей.Загрузить(РегистрацииВНалоговомОргане.Выгрузить());
	Форма.РегистрацииВНалоговомОрганеНаборЗаписей.Сортировать("Период");
	
	НастроитьПредставлениеИсторииКПП(Форма);
	
КонецПроцедуры

Процедура ОбновитьРегистрацииВНалоговомОрганеПослеРедактирования(РезультатРедактирования, Форма)
	
	Форма.Модифицированность = Истина;
	Форма.РегистрацииВНалоговомОрганеНаборЗаписей.Загрузить(РезультатРедактирования.ИсторияРегистрацииВНалоговомОргане.Выгрузить());
	Форма.РегистрацииВНалоговомОрганеНаборЗаписей.Сортировать("Период");
	
	КоличествоЗаписейИстории = Форма.РегистрацииВНалоговомОрганеНаборЗаписей.Количество();
	
	Если КоличествоЗаписейИстории > 0 Тогда
		АктуальнаяЗапись = Форма.РегистрацииВНалоговомОрганеНаборЗаписей[КоличествоЗаписейИстории - 1];
		Форма.ДанныеРегистрацийВНалоговыхОрганахИзменены = Истина;
		Форма.РегистрацияВНалоговомОргане = АктуальнаяЗапись.РегистрацияВНалоговомОргане;
		Форма.Объект.КПП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АктуальнаяЗапись.РегистрацияВНалоговомОргане, "КПП");
		Форма.Объект.КодНалоговогоОргана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АктуальнаяЗапись.РегистрацияВНалоговомОргане, "Код");
		Форма.ДатаРегистрацииВНалоговомОргане = АктуальнаяЗапись.Период;
	КонецЕсли;
	
	НастроитьПредставлениеИсторииКПП(Форма);
	
КонецПроцедуры

Процедура ЗаписатьРегистрациюВНалоговомОргане(Форма, Объект = Неопределено) Экспорт
	
	Если Объект = Неопределено Тогда 
	    Объект = Форма.Объект;
	КонецЕсли;
	СуществующаяЗапись = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОрганеПоКодуНО(
		Объект.Ссылка, Объект.КПП, Объект.КодНалоговогоОргана);
	
	Если Не ЗначениеЗаполнено(СуществующаяЗапись) Тогда
		Если ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РегистрацияВНалоговомОргане, "КПП") = Неопределено Тогда
			РегистрацияОбъект = Справочники.РегистрацииВНалоговомОргане.СоздатьЭлемент();
			РегистрацияОбъект.УстановитьСсылкуНового(Объект.РегистрацияВНалоговомОргане);
		Иначе
			РегистрацияОбъект = Объект.РегистрацияВНалоговомОргане.ПолучитьОбъект();
		КонецЕсли;
	Иначе
		РегистрацияОбъект = СуществующаяЗапись.ПолучитьОбъект();
	КонецЕсли;
	
	РегистрацияОбъект.Код			   = Объект.КодНалоговогоОргана;
	КодРегионаРегистрации			   = ДанныеГосударственныхОрганов.КодРегионаПоКодуНалоговогоОргана(Объект.КодНалоговогоОргана);
	РегистрацияОбъект.КодРегиона       = КодРегионаРегистрации;
	РегистрацияОбъект.КПП			   = Объект.КПП;   
	Если ЗначениеЗаполнено(Форма.ДатаРегистрацииВНалоговомОргане) Тогда 
		РегистрацияОбъект.ДатаПостановкиНаУчет  = Форма.ДатаРегистрацииВНалоговомОргане;
	Иначе
		РегистрацияОбъект.ДатаПостановкиНаУчет  = Объект.ДатаРегистрации;
	КонецЕсли;
	
	РеквизитыНалоговогоОргана		   = РаботаСКонтрагентами.РеквизитыНалоговогоОрганаПоКоду(Объект.КодНалоговогоОргана);
	
	Если Объект.ОбособленноеПодразделение Тогда
		РегистрацияОбъект.Владелец		= Объект.ГоловнаяОрганизация;
	Иначе
		РегистрацияОбъект.Владелец	    = Объект.Ссылка;
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыНалоговогоОргана.Наименование) Тогда
		РегистрацияОбъект.Наименование     = РеквизитыНалоговогоОргана.Наименование;
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыНалоговогоОргана.ПолноеНаименование) Тогда
		РегистрацияОбъект.НаименованиеИФНС = РеквизитыНалоговогоОргана.ПолноеНаименование;
	КонецЕсли;
	РегистрацияОбъект.Записать();
	Форма.РегистрацияВНалоговомОргане = РегистрацияОбъект.Ссылка;
	
	Если Форма.РегистрацииВНалоговомОрганеНаборЗаписей.Количество() = 0 Тогда
		РегистрацииВНалоговомОргане = Форма.РегистрацииВНалоговомОрганеНаборЗаписей;
		
		РегистрацииВНалоговомОргане.Очистить();
		Запись = РегистрацииВНалоговомОргане.Добавить();
		Запись.Организация = Объект.Ссылка;
		Запись.Период = РегистрацияОбъект.ДатаПостановкиНаУчет;
		Запись.РегистрацияВНалоговомОргане = РегистрацияОбъект.Ссылка; 
	КонецЕсли; 
	Отказ = Ложь;
	ЗаписатьРегистрацииВНалоговомОргане(Объект, Отказ, Форма);

КонецПроцедуры

Процедура ОбновитьКПППослеРедактированияРегистрацииВНалоговомОргане(РезультатРедактирования, Форма)
	Объект = Форма.Объект;
	НовыйКПП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РезультатРедактирования.Ссылка, "КПП");
	Если Объект.РегистрацияВНалоговомОргане = РезультатРедактирования.Ссылка
		И Не Объект.КПП = НовыйКПП Тогда
		Форма.Модифицированность = Истина;
		Объект.КПП = НовыйКПП;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

//-- Локализация
