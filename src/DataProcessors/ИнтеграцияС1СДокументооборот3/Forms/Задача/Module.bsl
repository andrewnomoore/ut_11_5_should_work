#Область ОписаниеПеременных

&НаКлиенте
Перем КлючСтрокиДереваПриложений;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоТонкийWindowsКлиент = Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриложениеЯвляетсяВебКлиентом()
		И ОбщегоНазначения.ЭтоWindowsКлиент();
	СтраницыКомандСозданияНаОсновании = ПоместитьВоВременноеХранилище(Новый Соответствие, УникальныйИдентификатор);
	
	ID = Параметры.ID;
	Тип = Параметры.type;
	СохраненныйКомментарий = Параметры.СохраненныйКомментарий;
	СостояниеДереваПриложений = Параметры.СостояниеДереваПриложений;
	СостояниеДереваПриложений = Параметры.СостояниеДереваПриложений;
	ОсновнойПредметID = Параметры.ОсновнойПредметID;
	ОсновнойПредметТип = Параметры.ОсновнойПредметТип;
	
	Если ЗначениеЗаполнено(Параметры.ДанныеПоЗадаче) Тогда
		
		ОписаниеHTMLЗадачи = Параметры.ДанныеПоЗадаче.ПредставлениеHTML;
		ДействиеЗадачи = Параметры.ДанныеПоЗадаче.ДействиеЗадачи; // См. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
		Заголовок = ДействиеЗадачи.Наименование;
		Обработки.ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьНавигационнуюСсылку(
			ЭтотОбъект,
			ДействиеЗадачи.НавигационнаяСсылка);
		
		ДополнительныеДанныеПоЗадаче = ПолучитьИзВременногоХранилища(Параметры.ДанныеПоЗадаче.АдресДополнительныхДанных);
		Если ДополнительныеДанныеПоЗадаче <> Неопределено Тогда
			АдресДополнительныхДанных = Параметры.ДанныеПоЗадаче.АдресДополнительныхДанных;
			ОтобразитьДополнительныеДанные(ДополнительныеДанныеПоЗадаче);
		КонецЕсли;
		
		ИнициализацияВыполнена = Истина;
		
	Иначе
		
		Заголовок = НСтр("ru = 'Загрузка задачи из 1С:Документооборот'");
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(Параметры.ПодходящиеПравила) И ЭтоАдресВременногоХранилища(Параметры.ПодходящиеПравила) Тогда
		ПодходящиеПравила = ПолучитьИзВременногоХранилища(Параметры.ПодходящиеПравила);
		ОтобразитьКомандыСозданияНаОсновании(ПодходящиеПравила);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверитьПодключение();
	
	// Развернем дерево приложений.
	ТипДерева = ИнтеграцияС1СДокументооборот3Клиент.ТипДерева();
	ТипДерева.ЭтоДеревоПриложений = Истина;
	ИнтеграцияС1СДокументооборот3Клиент.РазвернутьДерево(
		ТипДерева,
		ДеревоПриложений.ПолучитьЭлементы(),
		Элементы.ДеревоПриложений,
		СостояниеДереваПриложений);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИнтеграцияС1СДокументооборотом_УспешноеПодключение" Тогда
		Если Источник <> ЭтотОбъект Тогда
			ПриПодключении();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзмененРезультатДействияТекстом" Тогда
		Если Источник = ЭтотОбъект
				Или ТипЗнч(Параметр) <> Тип("Структура")
				Или Не Параметр.Свойство("Текст")
				Или Не Параметр.Свойство("ID")
				Или Не Параметр.Свойство("Тип") Тогда
			Возврат;
		КонецЕсли;
		Если Параметр.ID = ID И Параметр.Тип = Тип Тогда
			СохраненныйКомментарий = Параметр.Текст;
			РезультатДействияТекстом = Параметр.Текст;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Документооборот_ДействиеНадЗадачей" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура")
				И Параметр.Свойство("ТипОперации")
				И Параметр.Свойство("ID")
				И Параметр.Свойство("Тип")
				И Параметр.ID = ID
				И Параметр.Тип = Тип Тогда
			Если Параметр.ТипОперации.ВыполнитьДействиеЗадачи Или Параметр.ТипОперации.Перенаправить Тогда
				Если Открыта() Тогда
					Закрыть(Параметр.ТипОперации);
				КонецЕсли;
			Иначе
				Если Источник = ЭтотОбъект Тогда
					Возврат;
				КонецЕсли;
				ОбновитьФорму(Ложь, Ложь, Истина);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПолученHTMLПредпросмотрОбъекта" Тогда
		Если ТипЗнч(Параметр) <> Тип("Структура")
				Или Не Параметр.Свойство("ПредставлениеHTML")
				Или Не Параметр.Свойство("ПредпросмотрУрезан")
				Или Не Параметр.Свойство("ID")
				Или Не Параметр.Свойство("Тип") Тогда
			Возврат;
		КонецЕсли;
		РеквизитыКОбновлению = Новый Структура("ПредставлениеHTML, ПредпросмотрУрезан, ОжиданиеПредпросмотра",
			Параметр.ПредставлениеHTML,
			Параметр.ПредпросмотрУрезан,
			Ложь);
		ОбновлениеВыполнено = ОбновитьПриложениеПоID(
			Параметр.ID,
			Параметр.Тип,
			РеквизитыКОбновлению);
		Если ОбновлениеВыполнено Тогда
			ОбновитьПредпросмотр();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ДокументооборотФайл" Тогда
		Если ТипЗнч(Параметр) <> Тип("Структура")
				Или Не Параметр.Свойство("ИдентификаторФайла")
				Или Не Параметр.Свойство("Событие")
				Или Не Параметр.Свойство("ВладелецФайла")
				Или Не Параметр.Свойство("ИмяФайла")
				Или Не Параметр.Свойство("УникальныйИдентификаторФормы") Тогда
			Возврат;
		КонецЕсли;
		НужноОбновление = Ложь;
		РеквизитыКЧтению = Новый Структура("Редактируется", Неопределено);
		ОбновлениеВыполнено = ОбновитьПриложениеПоID(
			Параметр.ИдентификаторФайла,
			"DMFile",,
			РеквизитыКЧтению);
		Если ОбновлениеВыполнено Тогда
			// Измененный файл есть в дереве приложений.
			НужноОбновление = Истина;
			Если Параметр.Событие = "РедактированиеФайла" Тогда
				Если РеквизитыКЧтению.Редактируется = Неопределено Тогда
					НужноОбновление = Ложь;
				Иначе
					НужноОбновление = Не РеквизитыКЧтению.Редактируется;
				КонецЕсли;
			КонецЕсли;
		Иначе
			// Возможно владелец файла есть в дереве приложений, но самого файла нет.
			// Например, когда был добавлен новый файл.
			НужноОбновление = ОбновитьПриложениеПоID(Параметр.ВладелецФайла);
		КонецЕсли;
		Если НужноОбновление Тогда
			ТипДерева = ИнтеграцияС1СДокументооборот3Клиент.ТипДерева();
			ТипДерева.ЭтоДеревоПриложений = Истина;
			СостояниеДереваПриложений = ИнтеграцияС1СДокументооборот3Клиент.ТекущееСостояниеДерева(
				ТипДерева,
				ДеревоПриложений.ПолучитьЭлементы(),
				Элементы.ДеревоПриложений);
			Если Параметр.Событие = "СозданиеФайла" Тогда
				СтрокаНовогоФайла = Новый Структура(
					"ПредставлениеПриложения, ПриложениеID, ПриложениеТип, ТипСтроки, РольФайлаID");
				СтрокаНовогоФайла.ПредставлениеПриложения = Параметр.ИмяФайла;
				СтрокаНовогоФайла.ПриложениеID = Параметр.ИдентификаторФайла;
				СтрокаНовогоФайла.ПриложениеТип = "DMFile";
				СостояниеДереваПриложений.КлючТекущейСтрокиДерева =
					ИнтеграцияС1СДокументооборот3Клиент.КлючСтрокиДерева(ТипДерева, СтрокаНовогоФайла);
			КонецЕсли;
			Если Параметр.УникальныйИдентификаторФормы = Неопределено Тогда
				ВыводитьОкноОжидания = Истина;
			Иначе
				ВыводитьОкноОжидания = (УникальныйИдентификатор = Параметр.УникальныйИдентификаторФормы);
			КонецЕсли;
			ОбновитьФорму(ВыводитьОкноОжидания, Ложь, Истина);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Документооборот_ДобавлениеСвязи" Тогда
		Если ТипЗнч(Параметр) <> Тип("Структура")
				Или Не Параметр.Свойство("ID")
				Или Не Параметр.Свойство("Тип")
				Или Не Параметр.Свойство("Объект") Тогда
			Возврат;
		КонецЕсли;
		РеквизитыКОбновлению = Новый Структура("Ссылка, ПредставлениеПриложения",
			Параметр.Объект,
			ИнтеграцияС1СДокументооборот3ВызовСервера.ПредставлениеПриложенияОбъектаИС(Параметр.Объект));
		ОбновитьПриложениеПоID(
			Параметр.ID,
			Параметр.Тип,
			РеквизитыКОбновлению);
		ОтобразитьКомандыСозданияНаОсновании(Новый Массив);
		
	ИначеЕсли ИмяСобытия = "Документооборот_УдалениеСвязи" Тогда
		Если ТипЗнч(Параметр) <> Тип("Структура")
				Или Не Параметр.Свойство("ID")
				Или Не Параметр.Свойство("Тип")
				Или Не ОбновитьПриложениеПоID(Параметр.ID, Параметр.Тип) Тогда
			Возврат;
		КонецЕсли;
		ОбновитьФорму(Ложь, Ложь, Истина);
		
	ИначеЕсли ИмяСобытия = "Документооборот_ДействиеСОбработкой" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура")
				И Параметр.Свойство("ДанныеОбработки")
				И Параметр.ДанныеОбработки.ПредметID = ОсновнойПредметID
				И Параметр.ДанныеОбработки.ПредметТип = ОсновнойПредметТип Тогда
			Если Параметр.Свойство("ТипОперации")
					И (Параметр.ТипОперации.Остановить Или Параметр.ТипОперации.Прервать) Тогда
				Если Открыта() Тогда
					Закрыть();
				КонецЕсли;
			Иначе
				ОбновитьФорму(Ложь, Ложь, Истина);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатие(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ДекорацияНастройкиАвторизацииНажатиеЗавершение", ЭтотОбъект);
	ИмяФормыПараметров = "Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.АвторизацияВ1СДокументооборот";
	
	ОткрытьФорму(ИмяФормыПараметров,, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатиеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ПриПодключении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Найти(ДанныеСобытия.Href, "OpenForEdit") Тогда
		
		ИнтеграцияС1СДокументооборот3Клиент.ПриложенияЗадачиФайлыРедактировать(
			Элементы.ДеревоПриложений.ТекущиеДанные,
			УникальныйИдентификатор);
		
	ИначеЕсли Найти(ДанныеСобытия.Href, "OpenForView") Тогда
		
		ИнтеграцияС1СДокументооборот3Клиент.ОткрытьПриложениеЗадачиНаПросмотр(
			Элементы.ДеревоПриложений.ТекущиеДанные,
			УникальныйИдентификатор);
		
	ИначеЕсли Найти(ДанныеСобытия.Href, "CreatePreview") Тогда
		
		ОбновитьПредпросмотр(Истина, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатДействияТекстомОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	// Сохраним текст комментария при уходе фокуса.
	Если ПустаяСтрока(Текст) И СохраненныйКомментарий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохраненныйКомментарий = Текст;
	РезультатДействияТекстом = Текст;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ID", ID);
	ПараметрыОповещения.Вставить("Тип", Тип);
	ПараметрыОповещения.Вставить("Текст", Текст);
	Оповестить("ИзмененРезультатДействияТекстом", ПараметрыОповещения, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПриложений

&НаКлиенте
Процедура ДеревоПриложенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияС1СДокументооборот3Клиент.ОткрытьПриложениеЗадачиНаПросмотр(
		Элементы.ДеревоПриложений.ТекущиеДанные,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПриАктивизацииСтроки(Элемент)
	
	ИнтеграцияС1СДокументооборот3Клиент.УстановитьДоступностьКомандПриложенийЗадачи(
		Элемент.ТекущаяСтрока,
		КлючСтрокиДереваПриложений,
		ID,
		ЭтотОбъект,
		ЭтоТонкийWindowsКлиент);
	ПодключитьОбработчикОжидания("ОбновитьПредпросмотрПриАктивизацииСтроки", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПередНачаломИзменения(Элемент, Отказ)
	
	ИнтеграцияС1СДокументооборот3Клиент.ДеревоПриложенийЗадачиПередНачаломИзменения(
		Элементы.ДеревоПриложений.ТекущиеДанные,
		Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьДействиеЗадачиВариант1(Команда)
	
	ТипОперации = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ТипОперацииНадЗадачей();
	ТипОперации.ВыполнитьДействиеЗадачи = Истина;
	ПараметрыДействияНадЗадачей = ПараметрыДействияНадЗадачей();
	ПараметрыДействияНадЗадачей.ПараметрыОперации = Новый Структура("РезультатВариантаНомер", "РезультатВарианта1");
	ПараметрыДействияНадЗадачей.ТребуетсяОбновлениеДанных = Ложь;
	ДействиеНадЗадачей(ТипОперации, ПараметрыДействияНадЗадачей);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеЗадачиВариант2(Команда)
	
	ТипОперации = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ТипОперацииНадЗадачей();
	ТипОперации.ВыполнитьДействиеЗадачи = Истина;
	ПараметрыДействияНадЗадачей = ПараметрыДействияНадЗадачей();
	ПараметрыДействияНадЗадачей.ПараметрыОперации = Новый Структура("РезультатВариантаНомер", "РезультатВарианта2");
	ПараметрыДействияНадЗадачей.ТребуетсяОбновлениеДанных = Ложь;
	ДействиеНадЗадачей(ТипОперации, ПараметрыДействияНадЗадачей);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеЗадачиВариант3(Команда)
	
	ТипОперации = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ТипОперацииНадЗадачей();
	ТипОперации.ВыполнитьДействиеЗадачи = Истина;
	ПараметрыДействияНадЗадачей = ПараметрыДействияНадЗадачей();
	ПараметрыДействияНадЗадачей.ПараметрыОперации = Новый Структура("РезультатВариантаНомер", "РезультатВарианта3");
	ПараметрыДействияНадЗадачей.ТребуетсяОбновлениеДанных = Ложь;
	ДействиеНадЗадачей(ТипОперации, ПараметрыДействияНадЗадачей);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредпросмотрКоманда(Команда)
	
	ОбновитьПредпросмотр(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПриложение(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.ОткрытьПриложениеЗадачиНаПросмотр(
		Элементы.ДеревоПриложений.ТекущиеДанные,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточку(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.ОткрытьКарточкуПриложенияЗадачи(Элементы.ДеревоПриложений.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыВставитьКартинкуИзБуфера(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПриложенияЗадачиФайлыВставитьКартинкуИзБуфера(
		Элементы.ДеревоПриложений.ТекущиеДанные,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавить(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПриложенияЗадачиФайлыДобавить(
		Элементы.ДеревоПриложений.ТекущиеДанные,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыРедактировать(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПриложенияЗадачиФайлыРедактировать(
		Элементы.ДеревоПриложений.ТекущиеДанные,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыЗакончитьРедактирование(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПриложенияЗадачиФайлыЗакончитьРедактирование(
		Элементы.ДеревоПриложений.ТекущиеДанные,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыОсвободить(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПриложенияЗадачиФайлыОсвободить(
		Элементы.ДеревоПриложений.ТекущиеДанные,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыОбновитьИзФайлаНаДиске(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПриложенияЗадачиФайлыОбновитьИзФайлаНаДиске(
		Элементы.ДеревоПриложений.ТекущиеДанные,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыУдалить(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПриложенияЗадачиФайлыУдалить(
		Элементы.ДеревоПриложений.ТекущиеДанные,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыСохранитьКак(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПриложенияЗадачиФайлыСохранитьКак(
		Элементы.ДеревоПриложений.ТекущиеДанные,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоздатьСвязанныйОбъект(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.Подключаемый_СоздатьСвязанныйОбъект(
		Команда,
		ОсновнойПредметID,
		ОсновнойПредметТип);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьФорму(Истина, Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьВРаботу(Команда)
	
	ТипОперации = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ТипОперацииНадЗадачей();
	ТипОперации.ВзятьВРаботу = Истина;
	ДействиеНадЗадачей(ТипОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВзятиеВРаботу(Команда)
	
	ТипОперации = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ТипОперацииНадЗадачей();
	ТипОперации.ОтменитьВзятиеВРаботу = Истина;
	ДействиеНадЗадачей(ТипОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЖелтыйФлаг(Команда)
	
	ТипОперации = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ТипОперацииНадЗадачей();
	ТипОперации.УстановитьФлаг = Истина;
	ПараметрыДействияНадЗадачей = ПараметрыДействияНадЗадачей();
	ПараметрыДействияНадЗадачей.ПараметрыОперации = Новый Структура("Флаг", "Yellow");
	ДействиеНадЗадачей(ТипОперации, ПараметрыДействияНадЗадачей);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗеленыйФлаг(Команда)
	
	ТипОперации = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ТипОперацииНадЗадачей();
	ТипОперации.УстановитьФлаг = Истина;
	ПараметрыДействияНадЗадачей = ПараметрыДействияНадЗадачей();
	ПараметрыДействияНадЗадачей.ПараметрыОперации = Новый Структура("Флаг", "Green");
	ДействиеНадЗадачей(ТипОперации, ПараметрыДействияНадЗадачей);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКрасныйФлаг(Команда)
	
	ТипОперации = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ТипОперацииНадЗадачей();
	ТипОперации.УстановитьФлаг = Истина;
	ПараметрыДействияНадЗадачей = ПараметрыДействияНадЗадачей();
	ПараметрыДействияНадЗадачей.ПараметрыОперации = Новый Структура("Флаг", "Red");
	ДействиеНадЗадачей(ТипОперации, ПараметрыДействияНадЗадачей);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЛиловыйФлаг(Команда)
	
	ТипОперации = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ТипОперацииНадЗадачей();
	ТипОперации.УстановитьФлаг = Истина;
	ПараметрыДействияНадЗадачей = ПараметрыДействияНадЗадачей();
	ПараметрыДействияНадЗадачей.ПараметрыОперации = Новый Структура("Флаг", "Purple");
	ДействиеНадЗадачей(ТипОперации, ПараметрыДействияНадЗадачей);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОранжевыйФлаг(Команда)
	
	ТипОперации = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ТипОперацииНадЗадачей();
	ТипОперации.УстановитьФлаг = Истина;
	ПараметрыДействияНадЗадачей = ПараметрыДействияНадЗадачей();
	ПараметрыДействияНадЗадачей.ПараметрыОперации = Новый Структура("Флаг", "Orange");
	ДействиеНадЗадачей(ТипОперации, ПараметрыДействияНадЗадачей);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСинийФлаг(Команда)
	
	ТипОперации = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ТипОперацииНадЗадачей();
	ТипОперации.УстановитьФлаг = Истина;
	ПараметрыДействияНадЗадачей = ПараметрыДействияНадЗадачей();
	ПараметрыДействияНадЗадачей.ПараметрыОперации = Новый Структура("Флаг", "Blue");
	ДействиеНадЗадачей(ТипОперации, ПараметрыДействияНадЗадачей);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФлаг(Команда)
	
	ТипОперации = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ТипОперацииНадЗадачей();
	ТипОперации.УстановитьФлаг = Истина;
	ПараметрыДействияНадЗадачей = ПараметрыДействияНадЗадачей();
	ПараметрыДействияНадЗадачей.ПараметрыОперации = Новый Структура("Флаг", "");
	ДействиеНадЗадачей(ТипОперации, ПараметрыДействияНадЗадачей);
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Задача", Заголовок);
	ПараметрыФормы.Вставить("ЗадачаID", ID);
	ПараметрыФормы.Вставить("ЗадачаТип", Тип);
	ПараметрыФормы.Вставить("ИспользоватьИнтеграциюДО3", Истина);
	ОткрытьФорму(
		"Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ПеренаправлениеЗадачи",
		ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Клиент

&НаКлиенте
Процедура ОбновитьПредпросмотр(ОбновитьДанные = Ложь, ИгнорироватьМаксРазмер = Ложь)
	
	Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаЗагрузкаПревью;
	
	РедактируетсяТекущимПользователем = Ложь;
	ПредпросмотрУрезан = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТекущиеДанные.ОжиданиеПредпросмотра Тогда
			Возврат;
		КонецЕсли;
		
		Если (ТекущиеДанные.ПриложениеТип = "DMFile"
					Или ИнтеграцияС1СДокументооборот3КлиентПовтИсп.ЭтоИзвестныйОбъектОбзора(ТекущиеДанные.ПриложениеТип))
				И (Не ЗначениеЗаполнено(ТекущиеДанные.ПредставлениеHTML) Или ОбновитьДанные) Тогда
			
			ТекущиеДанные.ОжиданиеПредпросмотра = Истина;
			ДлительнаяОперация = ИнтеграцияС1СДокументооборот3ВызовСервера.ПолучитьHTMLПредпросмотрОбъектаАсинхронно(
				УникальныйИдентификатор,
				ТекущиеДанные.ПриложениеID,
				ТекущиеДанные.ПриложениеТип,
				ИгнорироватьМаксРазмер);
			
			ОповещениеОЗавершении = Новый ОписаниеОповещения(
					"ОбновитьПредпросмотрЗавершение",
					ЭтотОбъект,
					Новый Структура("ТекущиеДанные", ТекущиеДанные));
			
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьЗапросАсинхронно(
				ЭтотОбъект,
				ДлительнаяОперация,
				ОповещениеОЗавершении,
				Ложь,,
				Ложь);
			
			Возврат;
			
		ИначеЕсли ТекущиеДанные.ТипСтроки = "task"
				И (Не ЗначениеЗаполнено(ТекущиеДанные.ПредставлениеHTML) Или ОбновитьДанные) Тогда
			
			Если ЗначениеЗаполнено(ОписаниеHTMLЗадачи) Тогда
				
				ТекущиеДанные.ПредставлениеHTML = ОписаниеHTMLЗадачи;
				ТекущиеДанные.ПредпросмотрУрезан = Ложь;
				
			Иначе
				
				ТекущиеДанные.ОжиданиеПредпросмотра = Истина;
				ДлительнаяОперация = ИнтеграцияС1СДокументооборот3ВызовСервера.ПолучитьHTMLПредпросмотрОбъектаАсинхронно(
					УникальныйИдентификатор,
					ID,
					Тип,
					ИгнорироватьМаксРазмер);
				
				ОповещениеОЗавершении = Новый ОписаниеОповещения(
						"ОбновитьПредпросмотрЗавершение",
						ЭтотОбъект,
						Новый Структура("ТекущиеДанные", ТекущиеДанные));
				
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьЗапросАсинхронно(
					ЭтотОбъект,
					ДлительнаяОперация,
					ОповещениеОЗавершении,
					Ложь,,
					Ложь);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ПредставлениеHTML) Тогда
			ПредставлениеHTML = ТекущиеДанные.ПредставлениеHTML;
		Иначе
			ПредставлениеHTML = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СообщениеВПредпросмотр(
				НСтр("ru='Данные предпросмотра отсутствуют.'"),
				ЗаголовокСообщенияВОбластиПредпросмотра);
		КонецЕсли;
		
		РедактируетсяТекущимПользователем = ТекущиеДанные.РедактируетсяТекущимПользователем;
		ПредпросмотрУрезан = ТекущиеДанные.ПредпросмотрУрезан;
		
		Если ТекущиеДанные.ПриложениеТип = "DMFile" Тогда
			
			ОписаниеHTMLФайла = ПредставлениеHTML;
			ОбновитьЭлементыПредпросмотра(РедактируетсяТекущимПользователем, ПредпросмотрУрезан);
			Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаОбзорФайла;
			
		ИначеЕсли ИнтеграцияС1СДокументооборот3КлиентПовтИсп.ЭтоИзвестныйОбъектОбзора(ТекущиеДанные.ПриложениеТип) Тогда
			
			ОписаниеHTMLПриложения = ПредставлениеHTML;
			Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаОбзорПриложения;
			
		ИначеЕсли ТекущиеДанные.ТипСтроки = "task" Тогда
			
			ОписаниеHTMLЗадачи = ПредставлениеHTML;
			Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаОсновное;
			
		ИначеЕсли ТекущиеДанные.ТипСтроки = "instruction" Тогда
			
			Инструкция = ПредставлениеHTML;
			Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаИнструкция;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаЗагрузкаПревью Тогда
		
		Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаОсновное;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредпросмотрЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат <> Неопределено И Результат.Статус = "Ошибка" Тогда
		ПредставлениеHTML =
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СообщениеВПредпросмотр(
				Результат.КраткоеПредставлениеОшибки,
				ЗаголовокСообщенияВОбластиПредпросмотра);
		HTMLПредпросмотрОбъекта = Новый Структура;
		HTMLПредпросмотрОбъекта.Вставить("ID", ПараметрыОповещения.ТекущиеДанные.ПриложениеID);
		HTMLПредпросмотрОбъекта.Вставить("Тип", ПараметрыОповещения.ТекущиеДанные.ПриложениеТип);
		HTMLПредпросмотрОбъекта.Вставить("ПредставлениеHTML", ПредставлениеHTML);
		HTMLПредпросмотрОбъекта.Вставить("ПредпросмотрУрезан", Ложь);
		Оповестить("ПолученHTMLПредпросмотрОбъекта", HTMLПредпросмотрОбъекта, ЭтотОбъект);
	КонецЕсли;
	
	ОбработатьФорму = Ложь;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОперацияВыполнена(Результат, ОбработатьФорму) Тогда
		HTMLПредпросмотрОбъекта = Результат.РезультатДлительнойОперации;
		HTMLПредпросмотрОбъекта.Вставить("ID", ПараметрыОповещения.ТекущиеДанные.ПриложениеID);
		HTMLПредпросмотрОбъекта.Вставить("Тип", ПараметрыОповещения.ТекущиеДанные.ПриложениеТип);
		Оповестить("ПолученHTMLПредпросмотрОбъекта", HTMLПредпросмотрОбъекта, ЭтотОбъект);
	ИначеЕсли ОбработатьФорму Тогда
		ОбработатьФормуСогласноВерсииСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредпросмотрПриАктивизацииСтроки()
	
	ОбновитьПредпросмотр();
	
	// Сохраним текущее состояние дерева приложений.
	ТипДерева = ИнтеграцияС1СДокументооборот3Клиент.ТипДерева();
	ТипДерева.ЭтоДеревоПриложений = Истина;
	СостояниеДереваПриложений = ИнтеграцияС1СДокументооборот3Клиент.ТекущееСостояниеДерева(
		ТипДерева,
		ДеревоПриложений.ПолучитьЭлементы(),
		Элементы.ДеревоПриложений);
	
КонецПроцедуры

&НаКлиенте
Функция ОбновитьПриложениеПоID(ПриложениеID, ПриложениеТип = Неопределено, РеквизитыКОбновлению = Неопределено,
		РеквизитыКЧтению = Неопределено)
	
	НайденнаяСтрока = ПриложениеВДеревеЗначений(
		ДеревоПриложений.ПолучитьЭлементы(),
		ПриложениеID,
		ПриложениеТип);
	
	Если НайденнаяСтрока <> Неопределено Тогда
		
		Если РеквизитыКОбновлению <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НайденнаяСтрока, РеквизитыКОбновлению);
			ОбновитьДеревоВХранилище(ПриложениеID, ПриложениеТип, РеквизитыКОбновлению);
		КонецЕсли;
		
		Если РеквизитыКЧтению <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(РеквизитыКЧтению, НайденнаяСтрока);
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьЭлементыПредпросмотра(РедактируетсяТекущимПользователем = Ложь, ПредпросмотрУрезан = Ложь)
	
	Если РедактируетсяТекущимПользователем Тогда
		Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
	Иначе
		Элементы.ГруппаПредпросмотрУрезан.Видимость = ПредпросмотрУрезан;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыДействияНадЗадачей()
	
	ПараметрыДействияНадЗадачей = Новый Структура;
	ПараметрыДействияНадЗадачей.Вставить("ПараметрыОперации", Неопределено);
	ПараметрыДействияНадЗадачей.Вставить("ТребуетсяОбновлениеДанных", Истина);
	ПараметрыДействияНадЗадачей.Вставить("ТребуемоеИнтерактивноеДействие",
		ИнтеграцияС1СДокументооборот3КлиентСервер.ТребуемоеИнтерактивноеДействие());
	
	Возврат ПараметрыДействияНадЗадачей;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПриложениеВДеревеЗначений(Строки, ПриложениеID, ПриложениеТип)
	
	Для Каждого Строка Из Строки Цикл
		
		Если Строка.ПриложениеID = ПриложениеID И Строка.ПриложениеТип = ПриложениеТип Тогда
			Возврат Строка;
			
		ИначеЕсли Строка.ПриложениеID = ПриложениеID И ПриложениеТип = Неопределено Тогда
			Возврат Строка;
			
		КонецЕсли;
		
		Если ТипЗнч(Строка) = Тип("ДанныеФормыЭлементДерева") Тогда
			ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
		Иначе
			ПодчиненныеСтроки = Строка.Строки;
		КонецЕсли;
		НайденнаяСтрока = ПриложениеВДеревеЗначений(ПодчиненныеСтроки, ПриложениеID, ПриложениеТип);
		Если НайденнаяСтрока <> Неопределено Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#Область Сервер

&НаСервере
Процедура ОбработатьОтветВебСервисаНаПолучениеЗадачи(ЗадачаXDTO)
	
	Обработки.ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьНавигационнуюСсылку(ЭтотОбъект, ЗадачаXDTO);
	
	Заголовок = ЗадачаXDTO.title;
	ОписаниеHTMLЗадачи = ЗадачаXDTO.htmlView;
	
	Если Не ЗначениеЗаполнено(ОсновнойПредметID) И Не ЗначениеЗаполнено(ОсновнойПредметТип) Тогда
		ОсновнойПредмет = ИнтеграцияС1СДокументооборот3.ОсновнойПредметЗадачи(ЗадачаXDTO);
		ОсновнойПредметID = ОсновнойПредмет.ID;
		ОсновнойПредметТип = ОсновнойПредмет.Тип;
	КонецЕсли;
	
	ДополнительныеДанныеПоЗадаче = ИнтеграцияС1СДокументооборот3.ДополнительныеДанныеПоЗадаче(ЗадачаXDTO);
	Если Не ПустаяСтрока(АдресДополнительныхДанных) Тогда
		ПоместитьВоВременноеХранилище(ДополнительныеДанныеПоЗадаче, АдресДополнительныхДанных);
	КонецЕсли;
	
	ОтобразитьДополнительныеДанные(ДополнительныеДанныеПоЗадаче);
	
	УжеЕстьСвязь = Ложь;
	Если ДополнительныеДанныеПоЗадаче <> Неопределено Тогда
		Для Каждого СтрокаДереваПриложений Из ДополнительныеДанныеПоЗадаче.ДеревоПриложений.Строки Цикл
			Если ЗначениеЗаполнено(СтрокаДереваПриложений.Ссылка) Тогда
				УжеЕстьСвязь = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если Не УжеЕстьСвязь Тогда
		// Для построения списка команд создания на основании получим массив подходящих задаче правил интеграции,
		// также заполним данные идентификатор и тип основного предмета задачи.
		ПодходящиеПравила = ИнтеграцияС1СДокументооборот3ВызовСервера.ПодходящиеПравилаИнтеграцииПоОсновномуПредметуЗадачи(
			ЗадачаXDTO,
			ОсновнойПредметID,
			ОсновнойПредметТип);
		ОтобразитьКомандыСозданияНаОсновании(ПодходящиеПравила);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДополнительныеДанные(ДополнительныеДанныеПоЗадаче)
	
	Если ДополнительныеДанныеПоЗадаче = Неопределено Тогда
		Элементы.СтраницыЗадачаОднаНесколькоНет.ТекущаяСтраница = Элементы.СтраницаОшибка;
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборот3.ОбновитьОбластьДействияЗадачи(
		ЭтотОбъект,
		ДополнительныеДанныеПоЗадаче.ОбластьДействия,
		СохраненныйКомментарий,
		Ложь);
	
	Если Элементы.ВзятьВРаботу.Видимость Тогда
		Элементы.ГруппаКоманднаяПанель.Ширина = 17;
	Иначе
		Элементы.ГруппаКоманднаяПанель.Ширина = 3;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДополнительныеДанныеПоЗадаче.ДеревоПриложений, "ДеревоПриложений");
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьКомандыСозданияНаОсновании(ПодходящиеПравила)
	
	КлючСтраницыКомандСозданияНаОсновании = "";
	Если ПодходящиеПравила.Количество() > 0 Тогда
		// Каждой уникальной комбинации правил - соответствует своя группа команд создания на основании.
		// Для оптимизации, если при перерисовке формы совпадают подходящие правила - не будем создавать на форме
		// новую группу команд, а будем использовать созданную ранее группу.
		// Соответствие имени станицы определенной комбинации подходящих правил хранится во временном
		// хранилище по адресу СтраницыКомандСозданияНаОсновании.
		СоответствиеСтраниц = ПолучитьИзВременногоХранилища(СтраницыКомандСозданияНаОсновании);
		КлючСоответствияСтраниц = ЗначениеВСтрокуВнутр(ПодходящиеПравила);
		КлючСтраницыКомандСозданияНаОсновании = СоответствиеСтраниц[КлючСоответствияСтраниц];
		Если Не ЗначениеЗаполнено(КлючСтраницыКомандСозданияНаОсновании) Тогда
			КлючСтраницыКомандСозданияНаОсновании =
				ИнтеграцияС1СДокументооборот3.НоваяСтраницаКомандСозданияНаОснованииЗадачи(
					ЭтотОбъект,
					ПодходящиеПравила);
			СоответствиеСтраниц[КлючСоответствияСтраниц] = КлючСтраницыКомандСозданияНаОсновании;
			ПоместитьВоВременноеХранилище(СоответствиеСтраниц, СтраницыКомандСозданияНаОсновании);
		КонецЕсли;
	КонецЕсли;
	
	НоваяСтраница = Элементы["ГруппаСтраницаКоманд" + КлючСтраницыКомандСозданияНаОсновании];
	Если Элементы.ГруппаСтраницыКоманд.ТекущаяСтраница <> НоваяСтраница Тогда
		Элементы.ГруппаСтраницыКоманд.ТекущаяСтраница = НоваяСтраница;
		Элементы.ГруппаСтраницыКоманд.Видимость =
			(НоваяСтраница.ПодчиненныеЭлементы[0].ПодчиненныеЭлементы[0].ПодчиненныеЭлементы.Количество() > 0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоВХранилище(ПриложениеID, ПриложениеТип = Неопределено, РеквизитыКОбновлению = Неопределено)
	
	Если ПустаяСтрока(АдресДополнительныхДанных) Или РеквизитыКОбновлению = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеДанныеПоЗадаче = ПолучитьИзВременногоХранилища(АдресДополнительныхДанных);
	Если ДополнительныеДанныеПоЗадаче <> Неопределено Тогда
		НайденнаяСтрока = ПриложениеВДеревеЗначений(
			ДополнительныеДанныеПоЗадаче.ДеревоПриложений.Строки,
			ПриложениеID,
			ПриложениеТип);
		ЗаполнитьЗначенияСвойств(НайденнаяСтрока, РеквизитыКОбновлению);
		ПоместитьВоВременноеХранилище(ДополнительныеДанныеПоЗадаче, АдресДополнительныхДанных);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Подключение

// Проверяет подключение к ДО, выводя окно авторизации, если необходимо, и изменяя форму согласно результату.
//
&НаКлиенте
Процедура ПроверитьПодключение()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПодключениеЗавершение", ЭтотОбъект);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьПодключение(
		ОписаниеОповещения,
		ЭтотОбъект,,
		Ложь,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ПриПодключении();
	Иначе // не удалось подключиться к ДО
		ОбработатьФормуСогласноВерсииСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПодключении()
	
	Если ОбработатьФормуСогласноВерсииСервиса() Тогда
		ОбновитьФорму();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьФормуСогласноВерсииСервиса()
	
	ВерсияСервиса = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВерсияСервиса();
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СервисДоступен(ВерсияСервиса) Тогда
		Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаДокументооборотНедоступен;
		Возврат Ложь;
	КонецЕсли;
	
	ФормаОбработанаУспешно = Истина;
	
	Попытка
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса("3.0.10.20") Тогда
			
			Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаДокументооборотДоступен;
			
			НастройкиДокументооборота = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьНастройки();
			ЗаголовокСообщенияВОбластиПредпросмотра = НастройкиДокументооборота.ЗаголовокСообщенияВОбластиПредпросмотра;
			ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи =
				НастройкиДокументооборота.ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи;
			ФактическийИсполнительЗадач = НастройкиДокументооборота.ФактическийИсполнительЗадач;
			Если ФактическийИсполнительЗадач <> "taskPerformer" Тогда
				ТекущийПользовательИСотрудники =
					ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТекущийПользовательДокументооборота();
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
					ЭтотОбъект, ТекущийПользовательИСотрудники[0], "ТекущийПользователь");
			КонецЕсли;
			
		Иначе
			
			Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаВерсияНеПоддерживается;
			ФормаОбработанаУспешно = Ложь;
			
		КонецЕсли;
		
	Исключение
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.НужноОбработатьФорму(ИнформацияОбОшибке()) Тогда
			ОбработатьФормуСогласноВерсииСервиса();
		КонецЕсли;
		
	КонецПопытки;
	
	Возврат ФормаОбработанаУспешно;
	
КонецФункции

#КонецОбласти

#Область ОбновитьФорму

&НаКлиенте
Процедура ОбновитьФорму(ВыводитьОкноОжидания = Ложь, СкрыватьИнтерфейс = Истина, ОбновитьДанные = Ложь)
	
	Если ОбновитьДанные = Ложь И ДеревоПриложений.ПолучитьЭлементы().Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ВыводитьОкноОжидания И Не СкрыватьИнтерфейс Тогда
		Элементы.СтраницаДокументооборотДоступен.Доступность = Ложь;
	КонецЕсли;
	
	ДлительнаяОперация = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьОбъектАсинхронно(
		УникальныйИдентификатор,
		Тип,
		ID,
		"htmlView");
	ПараметрыОповещения = Новый Структура("ВыводитьОкноОжидания, СкрыватьИнтерфейс",
		ВыводитьОкноОжидания,
		СкрыватьИнтерфейс);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновитьФормуЗавершение", ЭтотОбъект, ПараметрыОповещения);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьЗапросАсинхронно(
		ЭтотОбъект,
		ДлительнаяОперация,
		ОповещениеОЗавершении,
		ВыводитьОкноОжидания,,
		СкрыватьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФормуЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Не ПараметрыОповещения.ВыводитьОкноОжидания И Не ПараметрыОповещения.СкрыватьИнтерфейс Тогда
		Элементы.СтраницаДокументооборотДоступен.Доступность = Истина;
	КонецЕсли;
	
	ОбработатьФорму = Ложь;
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьОшибкиПриОбновленииФормы(
		ЭтотОбъект,
		Результат,
		ОбработатьФорму);
	Если ОбработатьФорму Тогда
		ОбработатьФормуСогласноВерсииСервиса();
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОперацияВыполнена(Результат, ОбработатьФорму) Тогда
		ОбновлениеНаСервереЗавершение(Результат.РезультатДлительнойОперации);
		// Развернем дерево приложений.
		ТипДерева = ИнтеграцияС1СДокументооборот3Клиент.ТипДерева();
		ТипДерева.ЭтоДеревоПриложений = Истина;
		ИнтеграцияС1СДокументооборот3Клиент.РазвернутьДерево(
			ТипДерева,
			ДеревоПриложений.ПолучитьЭлементы(),
			Элементы.ДеревоПриложений,
			СостояниеДереваПриложений);
		ИнициализацияВыполнена = Истина;
	ИначеЕсли ОбработатьФорму Тогда
		ОбработатьФормуСогласноВерсииСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновлениеНаСервереЗавершение(ЗадачаXDTOСтрока)
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	ЗадачаXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СтрокаВОбъектXDTO(Прокси, ЗадачаXDTOСтрока);
	ОбработатьОтветВебСервисаНаПолучениеЗадачи(ЗадачаXDTO);
	
КонецПроцедуры

#КонецОбласти

#Область ДействиеНадЗадачей

&НаКлиенте
Процедура ДействиеНадЗадачей(ТипОперации, ПараметрыДействияНадЗадачей = Неопределено) Экспорт
	
	Если ПараметрыДействияНадЗадачей = Неопределено Тогда
		ПараметрыДействияНадЗадачей = ПараметрыДействияНадЗадачей();
	КонецЕсли;
	
	ДанныеПоЗадаче = ИнтеграцияС1СДокументооборот3Клиент.ДанныеПоЗадаче(
		ЭтотОбъект,
		ID,
		Тип,
		Заголовок,
		ПараметрыДействияНадЗадачей.ПараметрыОперации);
	ДанныеПоЗадаче.ТребуемоеИнтерактивноеДействие = ПараметрыДействияНадЗадачей.ТребуемоеИнтерактивноеДействие;
	
	Попытка
		ДлительнаяОперацияНадЗадачей = ИнтеграцияС1СДокументооборот3ВызовСервера.ДлительнаяОперацияНадЗадачей(
			ТипОперации,
			ДанныеПоЗадаче,
			УникальныйИдентификатор,
			ПараметрыДействияНадЗадачей.ТребуетсяОбновлениеДанных);
	Исключение
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.НужноОбработатьФорму(ИнформацияОбОшибке()) Тогда
			ОбработатьФормуСогласноВерсииСервиса();
		КонецЕсли;
	КонецПопытки;
	
	ПараметрыОповещения = Новый Структура("ID, Тип, ТипОперации", ID, Тип, ТипОперации);
	ПараметрыОповещения.Вставить("ПараметрыДействияНадЗадачей", ПараметрыДействияНадЗадачей);
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ДействиеНадЗадачейЗавершение",
		ЭтотОбъект,
		ПараметрыОповещения);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьЗапросАсинхронно(
		ЭтотОбъект,
		ДлительнаяОперацияНадЗадачей,
		ОповещениеОЗавершении,
		Истина,
		НСтр("ru = 'Выполняется действие над задачей.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеНадЗадачейЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	ОбработатьФорму = Ложь;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОперацияВыполнена(Результат, ОбработатьФорму) Тогда
		ОшибкаОбновления = "";
		РезультатДействия = ДействиеНадЗадачейНаСервереЗавершение(Результат.РезультатДлительнойОперации, ОшибкаОбновления);
		Если ОшибкаОбновления <> "" Тогда
			ПоказатьПредупреждение(, ОшибкаОбновления);
		КонецЕсли;
		ПовторноеДействие = Новый ОписаниеОповещения(
			"ДействиеНадЗадачей",
			ЭтотОбъект,
			ПараметрыОповещения.ПараметрыДействияНадЗадачей);
		Если ИнтеграцияС1СДокументооборот3Клиент.ВызванаИнтерактивнаяОбработка(
				РезультатДействия, ПараметрыОповещения.ТипОперации, ПовторноеДействие) Тогда
			Возврат;
		КонецЕсли;
		Если РезультатДействия.Успешно Тогда
			// Развернем дерево приложений.
			ТипДерева = ИнтеграцияС1СДокументооборот3Клиент.ТипДерева();
			ТипДерева.ЭтоДеревоПриложений = Истина;
			ИнтеграцияС1СДокументооборот3Клиент.РазвернутьДерево(
				ТипДерева,
				ДеревоПриложений.ПолучитьЭлементы(),
				Элементы.ДеревоПриложений,
				СостояниеДереваПриложений);
			Оповестить("Документооборот_ДействиеНадЗадачей", ПараметрыОповещения, ЭтотОбъект);
		Иначе
			ПоказатьПредупреждение(, РезультатДействия.ТекстПредупреждения);
		КонецЕсли;
	ИначеЕсли ОбработатьФорму Тогда
		ОбработатьФормуСогласноВерсииСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДействиеНадЗадачейНаСервереЗавершение(Знач РезультатДействияСтрока, ОшибкаОбновления)
	
	ДанныеДляОбновления = Неопределено;
	РезультатДействия = ИнтеграцияС1СДокументооборот3.РезультатВыполненияКомандыПоОбъекту(
		РезультатДействияСтрока,
		ДанныеДляОбновления);
	
	Если РезультатДействия.Успешно И ДанныеДляОбновления <> Неопределено Тогда
		Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ДанныеДляОбновления, "DMError") Тогда
			ОшибкаОбновления = СтрШаблон(
				НСтр("ru = 'При обновлении формы возникла ошибка:
					|%1'"),
				ДанныеДляОбновления.description);
		Иначе
			ЗадачаXDTO = ДанныеДляОбновления.objects[0];
			ОбработатьОтветВебСервисаНаПолучениеЗадачи(ЗадачаXDTO);
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатДействия;
	
КонецФункции

#КонецОбласти

#КонецОбласти