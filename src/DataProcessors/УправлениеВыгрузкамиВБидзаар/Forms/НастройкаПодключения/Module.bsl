// @strict-types
#Область ОписаниеПеременных

&НаКлиенте
Перем РезультатАвторизации;

&НаКлиенте
Перем ПутьКФайлуАвторизации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УчетнаяЗаписьЭТП.ВидЭТП = ОбщегоНазначения.ПредопределенныйЭлемент(
		"Перечисление.ВидыЭлектронныхТорговыхПлощадок.Бидзаар");
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьЭТП.ВидЭТП) Тогда

		Отказ = Истина;
		ВызватьИсключение НСтр("ru = 'Работа с ЭТП Бидзаар невозможна'");

	КонецЕсли;

	Если Параметры.Свойство("Организация", УчетнаяЗаписьЭТП.Организация) Тогда

		ЗаполнитьДанныеПоОрганизации();

		Элементы.Организация.ТолькоПросмотр = Истина;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ПроверитьНаличиеУчетнойЗаписи();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверитьПодключение(Команда)

	ОчиститьСообщения();

	Если Не ЗначениеЗаполнено(УчетнаяЗаписьЭТП.Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Заполните организацию", , "Организация", "УчетнаяЗаписьЭТП");
		Возврат;
	КонецЕсли;

	ПроверкаПройдена = ПроверитьПодключениеНаСервере();

	ПараметрыФормы = Новый Структура("ПроверкаПройдена", ПроверкаПройдена);
	ОткрытьФорму("Обработка.УправлениеВыгрузкамиВБидзаар.Форма.РезультатПроверкиПодключения", ПараметрыФормы,
		ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)

	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьЭТП.Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Укажите организацию",,"Организация","УчетнаяЗаписьЭТП");
		Возврат;
	КонецЕсли;

	ЗаписьУспешна = ЗаписатьДанныеВХранилище();

	Если ЗаписьУспешна Тогда
		Оповестить("ОбновитьСписокПодключений");
		Оповестить("ОбновитьУчетнуюЗапись", Новый Структура("УчетнаяЗапись", УчетнаяЗаписьСсылка));
		Закрыть();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПроверитьПодключениеНаСервере()

	Если Не ЗначениеЗаполнено(КлючAPI) Тогда
		ПроверкаПройдена = Ложь;

	ИначеЕсли XMLСтрока(УчетнаяЗаписьСсылка) = КлючAPI Тогда
		ДанныеУчетнойЗаписи = Новый Структура;
		ДанныеУчетнойЗаписи.Вставить("УчетнаяЗапись", УчетнаяЗаписьСсылка);
		ДанныеУчетнойЗаписи.Вставить("Организация", Неопределено);
		ДанныеУчетнойЗаписи.Вставить("ВидЭТП", УчетнаяЗаписьЭТП.ВидЭТП);
		ДанныеУчетнойЗаписи.Вставить("КлючAPI", Неопределено);

		ПроверкаПройдена = ПроверитьПодключениеКСерверу(ДанныеУчетнойЗаписи);
	Иначе
		ДанныеУчетнойЗаписи = Новый Структура;
		ДанныеУчетнойЗаписи.Вставить("УчетнаяЗапись", Неопределено);
		ДанныеУчетнойЗаписи.Вставить("Организация", УчетнаяЗаписьЭТП.Организация);
		ДанныеУчетнойЗаписи.Вставить("ВидЭТП", УчетнаяЗаписьЭТП.ВидЭТП);
		ДанныеУчетнойЗаписи.Вставить("КлючAPI", КлючAPI);

		ПроверкаПройдена = ПроверитьПодключениеКСерверу(ДанныеУчетнойЗаписи);
	КонецЕсли;

	Возврат ПроверкаПройдена;

КонецФункции

&НаСервере
Процедура ПроверитьНаличиеУчетнойЗаписи()

	ЭтоДубль = Ложь;

	УчетнаяЗаписьСсылка = Справочники.УчетныеЗаписиЭлектронныхТорговыхПлощадок.ПустаяСсылка();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", УчетнаяЗаписьЭТП.Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УчетныеЗаписиЭТП.Ссылка КАК УчетнаяЗаписьЭТП,
	|	УчетныеЗаписиЭТП.ПометкаУдаления КАК ПометкаУдаления,
	|	УчетныеЗаписиЭТП.ВидЭТП
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектронныхТорговыхПлощадок КАК УчетныеЗаписиЭТП
	|ГДЕ
	|	УчетныеЗаписиЭТП.ВидЭТП = Значение(Перечисление.ВидыЭлектронныхТорговыхПлощадок.Бидзаар)
	|	И УчетныеЗаписиЭТП.Организация = &Организация
	|	И НЕ УчетныеЗаписиЭТП.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПометкаУдаления Возр";

	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	Если Не РезультатЗапроса.Пустой() Тогда

		ВыборкаДанныхПроверки = РезультатЗапроса.Выбрать();
		ВыборкаДанныхПроверки.Следующий();

		Если ВыборкаДанныхПроверки.ПометкаУдаления Тогда
			УчетнаяЗаписьСсылка = ВыборкаДанныхПроверки.УчетнаяЗаписьЭТП;
			ИдентификаторУчетнойЗаписи = XMLСтрока(УчетнаяЗаписьСсылка);

			УстановитьПривилегированныйРежим(Истина);
			ВладелецЗаписиХранилища = ИнтеграцияСЭлектроннымиТорговымиПлощадками.ПрефиксыСервиса(
				ВыборкаДанныхПроверки.ВидЭТП).НастройкиСервиса + ИдентификаторУчетнойЗаписи;
			ЗначениеKeyAPI = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ВладелецЗаписиХранилища, "KeyAPI");
			УстановитьПривилегированныйРежим(Ложь);

			КлючAPI = ?(ЗначениеЗаполнено(ЗначениеKeyAPI), ИдентификаторУчетнойЗаписи, "");

		Иначе
			ЭтоДубль = Истина;
			ИнформацияОДубле = НСтр(
				"ru='Для организации %1 уже существует активная учетная запись. Создание новой учетной записи невозможно.'");
			Элементы.ДекорацияИнформацияОДубле.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ИнформацияОДубле, Строка(УчетнаяЗаписьЭТП.Организация));
		КонецЕсли;
	КонецЕсли;

	Элементы.ГруппаДанныеКлючаAPI.Видимость = Не ЭтоДубль;
	Элементы.ГруппаИнформацияОДубле.Видимость = ЭтоДубль;
	Элементы.ПроверитьПодключение.Доступность = Не ЭтоДубль;
	Элементы.Сохранить.Доступность = Не ЭтоДубль;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьПодключениеКСерверу(ДанныеУчетнойЗаписи)

	Результат = ИнтеграцияСЭлектроннымиТорговымиПлощадками.ПроверитьСвязьСЭТПБидзаар(ДанныеУчетнойЗаписи);

	Если Результат.КодСостояния = 200 Тогда
		Возврат Истина;
	Иначе
		ШаблонОшибки = НСтр("ru = 'Во время проверки подключения к HTTP-серверу произошла ошибка: %1 (%2)'");
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, Результат.КодСостояния, Результат.ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Выполняет удаление временных данных, сформированных при авторизации
// 
// Параметры:
//  Результат - Строка - Результат выполнения команды отображения страницы авторизации
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
&НаКлиенте
Процедура ЗапуститьПрограммуЗавершенияАвторизации(Результат, ДополнительныеПараметры) Экспорт

	РезультатАвторизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры,
		"АвторизацияУспешна", Ложь);
	ПутьКФайлуАвторизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ПутьКФайлу", "");

	ПодключитьОбработчикОжидания("УдалитьФайлРезультатаПодключения_Подключаемый", 1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлРезультатаПодключения_Подключаемый()

	Если ЗначениеЗаполнено(ПутьКФайлуАвторизации) Тогда
		Попытка
			УдалитьФайлы(ПутьКФайлуАвторизации);
		Исключение
			ЗаписатьОшибкуУдаленияФайла(ПутьКФайлуАвторизации, ОбработкаОшибок.ПодробноеПредставлениеОшибки(
				ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;

	Если РезультатАвторизации = Истина Тогда
		Оповестить("ВывестиСообщение", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Подключение организации <%1> выполнено успешно.'"), Строка(УчетнаяЗаписьЭТП.Организация)));
		Закрыть();
	КонецЕсли;

КонецПроцедуры

// Записывает ошибку удаления файла в журнал регистрации
// 
// Параметры:
//  ПутьФайлу - Строка - Путь файлу
//  ПредставлениеОшибки - Строка - Представление ошибки
//
&НаСервереБезКонтекста
Процедура ЗаписатьОшибкуУдаленияФайла(ПутьФайлу, ПредставлениеОшибки)

	ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось удалить временный файл <%1> по причине: %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
		ПутьФайлу, ПредставлениеОшибки);
	ЗаписьЖурналаРегистрации(ИнтеграцияСЭлектроннымиТорговымиПлощадками.СобытиеЖурналаРегистрации(
		Перечисления.ВидыЭлектронныхТорговыхПлощадок.Бидзаар), УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);

КонецПроцедуры

&НаСервере
Функция ЗаписатьДанныеВХранилище()

	ЗаписьУспешна = Истина;

	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);

	Попытка

		Если ЗначениеЗаполнено(УчетнаяЗаписьСсылка) Тогда
			БлокировкаДанных = Новый БлокировкаДанных;
			ЗаблокироватьДанныеДляРедактирования(УчетнаяЗаписьСсылка);
			ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.УчетныеЗаписиЭлектронныхТорговыхПлощадок");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", УчетнаяЗаписьСсылка);
			БлокировкаДанных.Заблокировать();

			УчетнаяЗаписьОбъект = УчетнаяЗаписьСсылка.ПолучитьОбъект();
			УстановитьНаименование = УчетнаяЗаписьОбъект.Организация <> УчетнаяЗаписьЭТП.Организация;
			УчетнаяЗаписьОбъект.Организация = УчетнаяЗаписьЭТП.Организация;
			УчетнаяЗаписьОбъект.ПометкаУдаления = Ложь;
		Иначе
			БлокировкаДанных = Новый БлокировкаДанных;
			ЗаблокироватьДанныеДляРедактирования(УчетнаяЗаписьЭТП.Ссылка);
			ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.УчетныеЗаписиЭлектронныхТорговыхПлощадок");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", УчетнаяЗаписьЭТП.Ссылка);
			БлокировкаДанных.Заблокировать();

			УчетнаяЗаписьОбъект = РеквизитФормыВЗначение("УчетнаяЗаписьЭТП", Тип(
				"СправочникОбъект.УчетныеЗаписиЭлектронныхТорговыхПлощадок"));
			УстановитьНаименование = Истина;
		КонецЕсли;

		Если УстановитьНаименование Тогда
			УчетнаяЗаписьОбъект.Наименование = Строка(УчетнаяЗаписьОбъект.Организация);
		КонецЕсли;

		УчетнаяЗаписьОбъект.ВидЭТП = ОбщегоНазначения.ПредопределенныйЭлемент(
			"Перечисление.ВидыЭлектронныхТорговыхПлощадок.Бидзаар");
		УчетнаяЗаписьОбъект.Записать();

		ИдентификаторУчетнойЗаписи = XMLСтрока(УчетнаяЗаписьОбъект.Ссылка);

		Если КлючAPI <> ИдентификаторУчетнойЗаписи Тогда
			ВладелецЗаписиХранилища = ИнтеграцияСЭлектроннымиТорговымиПлощадками.ПрефиксыСервиса(
				УчетнаяЗаписьОбъект.ВидЭТП).НастройкиСервиса + ИдентификаторУчетнойЗаписи;

			УстановитьПривилегированныйРежим(Истина);
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ВладелецЗаписиХранилища, КлючAPI, "KeyAPI");
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;

		ЗафиксироватьТранзакцию();

		КлючAPI = ?(ЗначениеЗаполнено(КлючAPI), ИдентификаторУчетнойЗаписи, "");

		УчетнаяЗаписьСсылка = УчетнаяЗаписьОбъект.Ссылка;

	Исключение

		ОтменитьТранзакцию();

		ЗаписьУспешна = Ложь;

		ШаблонСообщения = НСтр("ru = 'Не удалось выполнить подключение по причине: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;

	Возврат ЗаписьУспешна;

КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеПоОрганизации()

	УчетнаяЗаписьСсылка = Справочники.УчетныеЗаписиЭлектронныхТорговыхПлощадок.УчетнаяЗаписьОрганизации(
		УчетнаяЗаписьЭТП.Организация);

	ЗначениеВРеквизитФормы(УчетнаяЗаписьСсылка.ПолучитьОбъект(), "УчетнаяЗаписьЭТП");

	Если ЗначениеЗаполнено(УчетнаяЗаписьСсылка) Тогда

		ИдентификаторУчетнойЗаписи = XMLСтрока(УчетнаяЗаписьСсылка);

		УстановитьПривилегированныйРежим(Истина);
		ВладелецЗаписиХранилища = ИнтеграцияСЭлектроннымиТорговымиПлощадками.ПрефиксыСервиса(
			УчетнаяЗаписьЭТП.ВидЭТП).НастройкиСервиса + ИдентификаторУчетнойЗаписи;
		ЗначениеKeyAPI = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ВладелецЗаписиХранилища, "KeyAPI");
		УстановитьПривилегированныйРежим(Ложь);

		КлючAPI = ?(ЗначениеЗаполнено(ЗначениеKeyAPI), ИдентификаторУчетнойЗаписи, "");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
