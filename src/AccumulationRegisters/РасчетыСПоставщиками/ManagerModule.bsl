#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Т1 
	|	ПО Т.АналитикаУчетаПоПартнерам = Т1.КлючАналитики
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т1.Организация)
	|	И ЗначениеРазрешено(Т1.Партнер)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.РасчетыСПоставщиками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.18.31";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("489f7d26-6bd5-7043-a55c-3d06d445974a");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.РасчетыСПоставщиками.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	Обработчик.Комментарий = СтрШаблон(НСтр("ru = 'Добавляет записи по увеличению и уменьшению ""К оплате"" в накладные по заказам и по графику договора.
	|Исправляет период движений по ресурсу ""%1"".
	|Для движения переноса задолженности:
	| - заполняет новые реквизиты ""Объект расчетов приемник"", ""Аналитика учета по партнерам приемник"", ""Сумма приемник""
	| - перезаполняет идентификаторы фин.записи.
	| - заменяет хозяйственную операцию ""Оплата самозанятому"" на операцию ""Оплата поставщику"".
	|Очищает движения ресурса ""Оплачивается"" по Заявкам на расходование средств с пустыми объектами расчетов.
	|Перезаполняет поле ""Порядок зачета по дате платежа"" для платежных документов.
	|Исправляет порядок операции движений по ресурсу ""%2""'"),
	Метаданные.РегистрыНакопления.РасчетыСПоставщиками.Ресурсы.КОплате.Представление(),
	Метаданные.РегистрыНакопления.РасчетыСПоставщиками.Ресурсы.КПоступлению.Представление());
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщиками.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ДоговорыКонтрагентов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВзаимозачетЗадолженности.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщиками.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщиками.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

// Процедура регистрации данных для обработчика обновления ОбработатьДанныеДляПереходаНаВерсию.
// 
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра  = "РегистрНакопления.РасчетыСПоставщиками";

	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.Регистратор КАК Ссылка
	|ПОМЕСТИТЬ ВтНакладныеПоГрафикам
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Регистр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|			ПО Аналитика.КлючАналитики = Регистр.АналитикаУчетаПоПартнерам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|			ПО Договоры.Ссылка = Аналитика.Договор
	|			И Договоры.ЗаданГрафикИсполнения
	|ГДЕ
	|	Регистр.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Регистр.КПоступлению > 0 
	|	И (Регистр.ЗакупкаПоЗаказу НЕ В (&ПустыеСсылкиНаЗаказы)
	|		ИЛИ Договоры.Ссылка ЕСТЬ НЕ NULL)
	|	И НЕ Регистр.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|ВЫБРАТЬ
	|	Накладные.Ссылка КАК Регистратор
	|ИЗ
	|	ВтНакладныеПоГрафикам КАК Накладные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК ЗаписиКОплате
	|			ПО ЗаписиКОплате.Регистратор = Накладные.Ссылка
	|				И ЗаписиКОплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И ЗаписиКОплате.КОплате > 0
	|				И ЗаписиКОплате.ХозяйственнаяОПерация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК ЗаписиСумм
	|			ПО ЗаписиСумм.Регистратор = Накладные.Ссылка
	|				И ЗаписиСумм.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И ЗаписиСумм.Сумма > 0
	|ГДЕ
	|	ЗаписиКОплате.Регистратор ЕСТЬ NULL
	|	И ЗаписиСумм.Регистратор ЕСТЬ НЕ NULL
	|
	// Исправление кор.аналитики
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК КорРасчеты
	|	ПО Расчеты.Регистратор = КорРасчеты.Регистратор
	|		И Расчеты.КорАналитикаУчетаПоПартнерам = КорРасчеты.АналитикаУчетаПоПартнерам
	|		И Расчеты.КорОбъектРасчетов = КорРасчеты.ОбъектРасчетов
	|ГДЕ
	| 	Расчеты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	| 	И Расчеты.КорОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|	И КорРасчеты.ОбъектРасчетов ЕСТЬ NULL
	|
	// Исправление периода движения "К оплате"
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|ГДЕ
	|	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И Расчеты.КОплате > 0
	|	И НАЧАЛОПЕРИОДА(Расчеты.Период,ДЕНЬ) < НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора,ДЕНЬ)
	|	И НЕ Расчеты.Регистратор ССЫЛКА Документ.ВводОстатков
	|	И НЕ Расчеты.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов
	|
	// Заполнение идентификаторов и приемников
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Приемник.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Приемник
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК Источник
	|	ПО Приемник.Регистратор = Источник.Регистратор
	|		И Приемник.КорАналитикаУчетаПоПартнерам = Источник.АналитикаУчетаПоПартнерам
	|		И Приемник.КорОбъектРасчетов = Источник.ОбъектРасчетов
	|		И Приемник.ХозяйственнаяОперация = Источник.ХозяйственнаяОперация
	| 		И Приемник.КорОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	| 		И Источник.НастройкаХозяйственнойОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|ГДЕ
	| 	&НоваяАрхитектураВзаиморасчетов
	|	И Приемник.ИдентификаторФинЗаписи <> Источник.ИдентификаторФинЗаписи
	| 	И НЕ Приемник.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВзаимозачетЗадолженности КАК Взаимозачеты
	|	ПО Расчеты.Регистратор = Взаимозачеты.Ссылка
	|ГДЕ
	|	&НоваяАрхитектураВзаиморасчетов
	| 	И ЕСТЬNULL(Взаимозачеты.ОбъектРасчетовИнтеркампани,ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Регистратор
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(Расчеты.КорОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|				И Расчеты.КорАналитикаУчетаПоПартнерам <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка))
	|	И НЕ МАКСИМУМ(Расчеты.ОбъектРасчетовПриемник <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|					И Расчеты.АналитикаУчетаПоПартнерамПриемник  <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДвиженияРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК ДвиженияРегистра
	|ГДЕ
	|	ДвиженияРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдалитьОплатаСамозанятому)
	|
	// Очистка ресурса "Оплачивается"
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|ГДЕ
	|	Расчеты.Оплачивается <> 0
	|	И (Расчеты.ЗаявкаНаРасходованиеДенежныхСредств В (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДанныеРасшифровки.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ДанныеРасшифровки
	|		ГДЕ
	|			ДанныеРасшифровки.ОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|			И ДанныеРасшифровки.ОбъектРасчетов.Объект = Неопределено)
	|		ИЛИ НЕ Расчеты.ЗаявкаНаРасходованиеДенежныхСредств.КонтролироватьОплатуПоОбъектамРасчетов)
	|
	// Перезаполнение поля ПорядокЗачетаПоДатеПлатежа
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|ГДЕ
	|	Расчеты.Сумма > 0
	|	И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И Расчеты.ДатаПлатежа <> ДАТАВРЕМЯ(1,1,1)
	|	И НАЧАЛОПЕРИОДА(Расчеты.ДатаПлатежа,ДЕНЬ) <> НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора,ДЕНЬ)
	|	И Расчеты.ПорядокОперации = Расчеты.ПорядокЗачетаПоДатеПлатежа
	|	И Расчеты.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами)
	//Исправление порядка операции "КПоступлению"
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|ГДЕ
	|	Расчеты.КПоступлению <> 0
	|	И НАЧАЛОПЕРИОДА(Расчеты.Период, ДЕНЬ) <> НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора, ДЕНЬ)
	|	И ПОДСТРОКА(Расчеты.ПорядокОперации, 0, 8) <> ПОДСТРОКА(Расчеты.ПорядокЗачетаПоДатеПлатежа, 0, 8)
	|	И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) В (ТИП(Документ.ЗаказПоставщику)
	
	
	|										)
	|";
	
	Запрос.УстановитьПараметр("ПустыеСсылкиНаЗаказы", ОперативныеВзаиморасчетыСервер.ПустыеСсылкиНаЗаказы());
	Запрос.УстановитьПараметр("НоваяАрхитектураВзаиморасчетов", ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор"),
		ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "РегистрНакопления.РасчетыСПоставщиками";
	ИмяОбъекта = СтрРазделить(ПолноеИмяОбъекта,".")[1];
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	ПараметрыОбработки = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуРегистраторовРегистраДляОбработки(
		Параметры.Очередь,
		Неопределено, 
		ПолноеИмяОбъекта, 
		МенеджерВременныхТаблиц);
	
	Если НЕ ПараметрыОбработки.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ ПараметрыОбработки.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Регистр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|			ПО Аналитика.КлючАналитики = Регистр.АналитикаУчетаПоПартнерам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|			ПО Договоры.Ссылка = Аналитика.Договор
	|			И Договоры.ЗаданГрафикИсполнения
	|ГДЕ
	|	Регистр.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Регистр.КПоступлению > 0 
	|	И (Регистр.ЗакупкаПоЗаказу НЕ В (&ПустыеСсылкиНаЗаказы)
	|		ИЛИ Договоры.Ссылка ЕСТЬ НЕ NULL)
	|	И Регистр.Регистратор В (ВЫБРАТЬ ВТДляОбработки.Регистратор ИЗ ВТДляОбработки)";
	Запрос.УстановитьПараметр("ПустыеСсылкиНаЗаказы", ОперативныеВзаиморасчетыСервер.ПустыеСсылкиНаЗаказы());
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДляОбработки", ПараметрыОбработки.ИмяВременнойТаблицы);
	НакладныеПоГрафикам = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|
	|	ДанныеРегистра.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ЕСТЬNULL(КлючиАналитики.Организация, НЕОПРЕДЕЛЕНО) КАК Организация,
	|	ЕСТЬNULL(КлючиАналитики.Партнер, НЕОПРЕДЕЛЕНО) КАК Партнер,
	|	ЕСТЬNULL(КлючиАналитики.Контрагент, НЕОПРЕДЕЛЕНО) КАК Контрагент,
	|	ЕСТЬNULL(КлючиАналитики.Договор, НЕОПРЕДЕЛЕНО) КАК Договор,
	|	ЕСТЬNULL(КлючиАналитики.НаправлениеДеятельности, НЕОПРЕДЕЛЕНО) КАК НаправлениеДеятельности,
	|
	|	ДанныеРегистра.КорОбъектРасчетов КАК КорОбъектРасчетов,
	|	ДанныеРегистра.КорАналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам,
	|	ЕСТЬNULL(КорКлючиАналитики.Организация, НЕОПРЕДЕЛЕНО) КАК КорОрганизация,
	|	ЕСТЬNULL(КорКлючиАналитики.Партнер, НЕОПРЕДЕЛЕНО) КАК КорПартнер,
	|	ЕСТЬNULL(КорКлючиАналитики.Контрагент, НЕОПРЕДЕЛЕНО) КАК КорКонтрагент,
	|	ЕСТЬNULL(КорКлючиАналитики.Договор, НЕОПРЕДЕЛЕНО) КАК КорДоговор,
	|	ЕСТЬNULL(КорКлючиАналитики.НаправлениеДеятельности, НЕОПРЕДЕЛЕНО) КАК КорНаправлениеДеятельности
	|ИЗ 
	|	РегистрНакопления.РасчетыСПоставщиками КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработки КАК СсылкиДляОбработки
	|		ПО ДанныеРегистра.Регистратор = СсылкиДляОбработки.Регистратор
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитики
	|		ПО ДанныеРегистра.АналитикаУчетаПоПартнерам = КлючиАналитики.КлючАналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК КорКлючиАналитики
	|		ПО ДанныеРегистра.КорАналитикаУчетаПоПартнерам = КорКлючиАналитики.КлючАналитики
	|ГДЕ
	| 	ДанныеРегистра.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|;
	|
	|ВЫБРАТЬ
	|	СсылкиДляОбработки.Регистратор КАК Регистратор,
	|	СсылкиДляОбработки.Регистратор.Номер КАК РегистраторНомер
	|ИЗ 
	|	ВТДляОбработки КАК СсылкиДляОбработки
	|";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДляОбработки", ПараметрыОбработки.ИмяВременнойТаблицы);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ПоляКлючаАналитики =  РезультатыЗапроса[0].Выгрузить();
	ПоляПоискаКорАналитики = "Регистратор,КорОбъектРасчетов,КорАналитикаУчетаПоПартнерам";
	ПоляПоискаАналитики = "Регистратор,ОбъектРасчетов,Организация,Контрагент,Договор,НаправлениеДеятельности";
	ПоляКлючаАналитики.Индексы.Добавить(ПоляПоискаКорАналитики);
	ПоляКлючаАналитики.Индексы.Добавить(ПоляПоискаАналитики);
	
	ОбновляемыеДанные =  РезультатыЗапроса[1].Выбрать();
	
	ЗапросВспомогательныхДанных = РегистрыНакопления.РасчетыСКлиентами.ЗапросВспомогательныхДанных(Ложь);
	
	ПоляЗаполнения = "
		|Активность,Период,АналитикаУчетаПоПартнерам,Валюта,КОплате,
		|ХозяйственнаяОперация,ФормаОплаты,
		|ПорядокОперации,ВалютаДокумента,ИдентификаторФинЗаписи";
	
	НастройкаХозяйственнойОперации = 
		Справочники.НастройкиХозяйственныхОпераций.НайтиПоРеквизиту("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	НеИспользуемаяНастройкаОперации = 
		Справочники.НастройкиХозяйственныхОпераций.НайтиПоРеквизиту("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.УдалитьОплатаСамозанятому);
	
	Пока ОбновляемыеДанные.Следующий() Цикл
		
		ПроблемныйРегистратор = ОбновляемыеДанные.Регистратор;
		
		ЗапросВспомогательныхДанных.УстановитьПараметр("Ссылка", ПроблемныйРегистратор);
		ВспомогательныеДанные = ЗапросВспомогательныхДанных.ВыполнитьПакет();
		РегистраторыРасчетов = ВспомогательныеДанные[0].Выгрузить();
		
		НачатьТранзакцию();
		
		Попытка
			
			#Область Блокировки
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСПоставщиками.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", ПроблемныйРегистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСПоставщикамиПоСрокам.НаборЗаписей");
			ЭлементБлокировки.ИсточникДанных = РегистраторыРасчетов;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			#КонецОбласти
			
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ПроблемныйРегистратор);
			НаборЗаписей.Прочитать();

			Если НакладныеПоГрафикам.Найти(ПроблемныйРегистратор) <> Неопределено Тогда
			
				ДатаРегистратора = Дата(1,1,1);
				ЕстьРасходКОплате = Ложь;
				ЗаписьСуммы = Неопределено;
				ЗаписьКПоступлению = Неопределено;
				Для Каждого Запись Из НаборЗаписей Цикл
					Если Запись.Сумма > 0 
						И Запись.ВидДвижения = ВидДвиженияНакопления.Расход 
						И Запись.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПереносАванса
						И Запись.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами Тогда
						ЗаписьСуммы = Запись;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ДатаРегистратора) И ЗначениеЗаполнено(Запись.ДатаРегистратора) Тогда
						ДатаРегистратора = Запись.ДатаРегистратора;
					КонецЕсли;
					Если Запись.КПоступлению <> 0 Тогда
						ЗаписьКПоступлению = Запись;
					КонецЕсли;
					Если Запись.КОплате > 0 
						И Запись.ВидДвижения = ВидДвиженияНакопления.Приход 
						И Запись.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПереносАванса
						И Запись.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами Тогда
						ЕстьРасходКОплате = Истина;
					КонецЕсли;
				КонецЦикла;
				
				ЗаписьНакладной = ?(ЗаписьСуммы <> Неопределено, ЗаписьСуммы, ЗаписьКПоступлению);
				
				Если Не ЕстьРасходКОплате И ЗаписьНакладной <> Неопределено Тогда
					
					Для Каждого Запись Из НаборЗаписей Цикл
						
						Если (Запись.Сумма > 0 
							//ПТУ в статусе "В пути"
							ИЛИ Запись.КПоступлению > 0 И ЗаписьСуммы = Неопределено)
							И Запись.ВидДвижения = ВидДвиженияНакопления.Расход 
							И Запись.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПереносАванса
							И Запись.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами Тогда
							КОплатеПриход = НаборЗаписей.Добавить();
							ЗаполнитьЗначенияСвойств(КОплатеПриход,ЗаписьНакладной,ПоляЗаполнения);
							КОплатеПриход.Период = КонецДня(Запись.ДатаПлатежа);
							КОплатеПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
							КОплатеПриход.КОплате = ?(Запись.Сумма>0,Запись.Сумма,Запись.КПоступлению);
							КОплатеПриход.ВариантОплаты = Запись.ВариантОплаты;
							КОплатеПриход.ДатаПлатежа = Запись.ДатаПлатежа;
							КОплатеПриход.ЗакупкаПоЗаказу = Запись.ЗакупкаПоЗаказу;
							КОплатеПриход.ПорядокЗачетаПоДатеПлатежа = Запись.ПорядокЗачетаПоДатеПлатежа;
							КОплатеПриход.ОбъектРасчетов = Запись.ОбъектРасчетов;
							КОплатеПриход.ДатаРегистратора = ДатаРегистратора;
							Если НЕ ЗначениеЗаполнено(КОплатеПриход.ВариантОплаты) Тогда
								КОплатеПриход.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыПоставщику.КредитПослеПоступления;
							КонецЕсли;
						КонецЕсли;
						Если Запись.КПоступлению > 0
							И Запись.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
							КОплатеРасход = НаборЗаписей.Добавить();
							ЗаполнитьЗначенияСвойств(КОплатеРасход,ЗаписьНакладной,ПоляЗаполнения);
							КОплатеРасход.Период = Запись.Период;
							КОплатеРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
							КОплатеРасход.КОплате = Запись.КПоступлению;
							КОплатеРасход.ЗакупкаПоЗаказу = Запись.ЗакупкаПоЗаказу;
							КОплатеРасход.ПорядокЗачетаПоДатеПлатежа = ЗаписьНакладной.ПорядокОперации;
							КОплатеРасход.ОбъектРасчетов = Запись.ОбъектРасчетов;
							КОплатеРасход.ДатаРегистратора = ДатаРегистратора;
						КонецЕсли;
					КонецЦикла;
						
				КонецЕсли;
			КонецЕсли;
			
			#Область ИсправлениеКорАналитики			
			ДанныеНабора = НаборЗаписей.Выгрузить();
			СтарыеДанныеНабора = НаборЗаписей.Выгрузить();
			ОтметитьОбработку = Истина;
			ЕстьИзменения = Ложь;
			ДанныеНабора.Индексы.Добавить("АналитикаУчетаПоПартнерам,ОбъектРасчетов,НастройкаХозяйственнойОперации");
			ТаблицыДвижений = Неопределено;
			НовыеДанныеНабора = Неопределено;
			Если ТипЗнч(ПроблемныйРегистратор) = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
				Для Каждого Запись Из ДанныеНабора Цикл
					
					Если НЕ ЗначениеЗаполнено(Запись.КорОбъектРасчетов) Тогда
						Продолжить;
					КонецЕсли;
					
					Отбор = Новый Структура("АналитикаУчетаПоПартнерам,ОбъектРасчетов");
					Отбор.ОбъектРасчетов = Запись.КорОбъектРасчетов;
					Отбор.АналитикаУчетаПоПартнерам = Запись.КорАналитикаУчетаПоПартнерам;
					СтрокиИсточники = ДанныеНабора.НайтиСтроки(Отбор);
					Если СтрокиИсточники.Количество() <> 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ОтборКорАналитики = Новый Структура(ПоляПоискаКорАналитики);
					ОтборКорАналитики.Регистратор = ПроблемныйРегистратор;
					ОтборКорАналитики.КорОбъектРасчетов = Запись.КорОбъектРасчетов;
					ОтборКорАналитики.КорАналитикаУчетаПоПартнерам = Запись.КорАналитикаУчетаПоПартнерам;
					КорАналитика = ПоляКлючаАналитики.НайтиСтроки(ОтборКорАналитики);
					
					Если КорАналитика.Количество() = 0 Тогда
						ОтметитьОбработку = Ложь;
						Прервать;
					КонецЕсли;
					
					ОтборАналитики = Новый Структура(ПоляПоискаАналитики);
					ОтборАналитики.Регистратор = ПроблемныйРегистратор;
					ОтборАналитики.ОбъектРасчетов = Запись.КорОбъектРасчетов;
					ОтборАналитики.Организация = КорАналитика[0].КорОрганизация;
					ОтборАналитики.Контрагент = КорАналитика[0].КорКонтрагент;
					ОтборАналитики.Договор = КорАналитика[0].КорДоговор;
					ОтборАналитики.НаправлениеДеятельности = КорАналитика[0].КорНаправлениеДеятельности;
				
					Аналитика = ПоляКлючаАналитики.НайтиСтроки(ОтборАналитики);
					Если Аналитика.Количество() = 1 Тогда
						Запись.КорАналитикаУчетаПоПартнерам = Аналитика[0].АналитикаУчетаПоПартнерам;
						ЕстьИзменения = Истина;
					Иначе
						Если ТаблицыДвижений = Неопределено Тогда
							ТаблицыДвижений = Документы.ВзаимозачетЗадолженности.ДанныеДокументаДляПроведения(ПроблемныйРегистратор, ИмяОбъекта);
						КонецЕсли;
						НовыеДанныеНабора = ТаблицыДвижений.ТаблицаРасчетыСПоставщиками;
						Для Каждого Строка Из НовыеДанныеНабора Цикл
							НоваяСтрока = СтарыеДанныеНабора.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
							НоваяСтрока.Сумма = -Строка.Сумма;
							НоваяСтрока.КОплате = -Строка.КОплате;
							НоваяСтрока.СуммаРегл = -Строка.СуммаРегл;
							НоваяСтрока.СуммаУпр = -Строка.СуммаУпр;
						КонецЦикла;
						КопияНабора = НовыеДанныеНабора.Скопировать();
						КопияНабора.Свернуть("АналитикаУчетаПоПартнерам,ОбъектРасчетов,Валюта","Сумма,КОплате,СуммаРегл,СуммаУпр");
						СтарыеДанныеНабора.Свернуть("АналитикаУчетаПоПартнерам,ОбъектРасчетов,Валюта","Сумма,КОплате,СуммаРегл,СуммаУпр");
						ОтборНулей = Новый Структура("Сумма,КОплате,СуммаРегл,СуммаУпр",0,0,0,0);
						СтрокиСНулями = СтарыеДанныеНабора.НайтиСтроки(ОтборНулей);
						Если СтрокиСНулями.Количество() <> КопияНабора.Количество() Тогда
							НовыеДанныеНабора = Неопределено;
							ОтметитьОбработку = Истина;
						КонецЕсли;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			Если НовыеДанныеНабора <> Неопределено Тогда
				НаборЗаписей.Загрузить(НовыеДанныеНабора);
			ИначеЕсли ЕстьИзменения Тогда
				НаборЗаписей.Загрузить(ДанныеНабора);
			КонецЕсли;
			#КонецОбласти
			
			#Область ЗаполнениеПриемниковВОперативномРегистре
			ПриемникиДокумента = ВспомогательныеДанные[2].Выгрузить();
			ИсточникиДокумента = ВспомогательныеДанные[3].Выгрузить();
			
			МассивОтборов = Новый Массив;
			МассивОтборов.Добавить(Новый Структура("Регистратор,АналитикаУчетаПоПартнерам,ОбъектРасчетов,ХозяйственнаяОперация,Сторно"));
			МассивОтборов.Добавить(Новый Структура("Регистратор,ОбъектРасчетов,ХозяйственнаяОперация,Сторно"));
			МассивОтборов.Добавить(Новый Структура("Регистратор,ХозяйственнаяОперация,Сторно"));
			ЕстьОшибка = Ложь;
			Для Каждого Приемник Из ПриемникиДокумента Цикл
				Если Приемник.ВалютаНеСовпадает Тогда
					Отбор = МассивОтборов[0];
					ЗаполнитьЗначенияСвойств(Отбор,Приемник);
					Отбор.АналитикаУчетаПоПартнерам = Приемник.КорАналитикаУчетаПоПартнерам;
					Отбор.ОбъектРасчетов = Приемник.КорОбъектРасчетов;
					РегистрыНакопления.РасчетыСКлиентами.РаспределитьПриемникПоИсточникам(НаборЗаписей, Приемник, Отбор, ЕстьОшибка);
				Иначе
					Для Каждого Отбор Из МассивОтборов Цикл
						ЗаполнитьЗначенияСвойств(Отбор,Приемник);
						Если Отбор.Свойство("АналитикаУчетаПоПартнерам") Тогда
							Отбор.АналитикаУчетаПоПартнерам = Приемник.КорАналитикаУчетаПоПартнерам;
						КонецЕслИ;
						Если Отбор.Свойство("ОбъектРасчетов") Тогда
							Отбор.ОбъектРасчетов = Приемник.КорОбъектРасчетов;
						КонецЕсли;
						Источники = ИсточникиДокумента.Скопировать(Отбор);
						СуммаИсточников = Источники.Итог("Сумма");
						Если Макс(Приемник.Сумма,-Приемник.Сумма) > Макс(СуммаИсточников,-СуммаИсточников) Тогда
							ЕстьОшибка = Истина;
							Прервать;
						ИначеЕсли Макс(Приемник.Сумма,-Приемник.Сумма) < Макс(СуммаИсточников,-СуммаИсточников) Тогда
							Продолжить;
						Иначе
							РегистрыНакопления.РасчетыСКлиентами.РаспределитьПриемникПоИсточникам(НаборЗаписей, Приемник, Отбор, ЕстьОшибка);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			#КонецОбласти
			
			Если НаборЗаписей.Модифицированность() И НЕ ЕстьОшибка Тогда
			#Область РаспределениеРасчетовПоСрокам
			
				МассивОтборов = Новый Массив;
				МассивОтборов.Добавить(Новый Структура("ДокументРегистратор,АналитикаУчетаПоПартнерам,ОбъектРасчетов,ХозяйственнаяОперация,Сторно"));
				МассивОтборов.Добавить(Новый Структура("ДокументРегистратор,ОбъектРасчетов,ХозяйственнаяОперация,Сторно"));
				МассивОтборов.Добавить(Новый Структура("ДокументРегистратор,ХозяйственнаяОперация,Сторно"));
				
				НаборыРегистраторовРасчетов = РегистрыНакопления.РасчетыСКлиентами.НаборыРегистраторовРасчетов(РегистраторыРасчетов);
				ПриемникиДокументаПоСрокам = ВспомогательныеДанные[5].Выгрузить();
				ИсточникиДокументаПоСрокам = ВспомогательныеДанные[6].Выгрузить();
				Для Каждого Приемник Из ПриемникиДокументаПоСрокам Цикл
					Если Приемник.ВалютаНеСовпадает Тогда
						Отбор = МассивОтборов[0];
						ЗаполнитьЗначенияСвойств(Отбор,Приемник);
						Отбор.АналитикаУчетаПоПартнерам = Приемник.КорАналитикаУчетаПоПартнерам;
						Отбор.ОбъектРасчетов = Приемник.КорОбъектРасчетов;
						РегистрыНакопления.РасчетыСКлиентами.РаспределитьПриемникПоИсточникамПоСрокам(НаборыРегистраторовРасчетов, Приемник, Отбор, ЕстьОшибка);
					Иначе
						Для Каждого Отбор Из МассивОтборов Цикл
							ЗаполнитьЗначенияСвойств(Отбор,Приемник);
							Если Отбор.Свойство("АналитикаУчетаПоПартнерам") Тогда
								Отбор.АналитикаУчетаПоПартнерам = Приемник.КорАналитикаУчетаПоПартнерам;
							КонецЕслИ;
							Если Отбор.Свойство("ОбъектРасчетов") Тогда
								Отбор.ОбъектРасчетов = Приемник.КорОбъектРасчетов;
							КонецЕсли;
							Источники = ИсточникиДокументаПоСрокам.Скопировать(Отбор);
							СуммаИсточников = Источники.Итог("Сумма");
							Если Макс(Приемник.Сумма,-Приемник.Сумма) > Макс(СуммаИсточников,-СуммаИсточников) Тогда
								ЕстьОшибка = Истина;
								Прервать;
							ИначеЕсли Макс(Приемник.Сумма,-Приемник.Сумма) < Макс(СуммаИсточников,-СуммаИсточников) Тогда
								Продолжить;
							Иначе
								РегистрыНакопления.РасчетыСКлиентами.РаспределитьПриемникПоИсточникамПоСрокам(НаборыРегистраторовРасчетов, Приемник, Отбор, ЕстьОшибка);
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
			#КонецОбласти
				Если НЕ ЕстьОшибка Тогда
					Для Каждого КлючИЗначение Из НаборыРегистраторовРасчетов Цикл
						Набор = РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.СоздатьНаборЗаписей();
						Набор.Отбор.Регистратор.Установить(КлючИЗначение.Ключ);
						Набор.Загрузить(КлючИЗначение.Значение);
						Набор.ОбменДанными.Загрузка = Истина;
						Набор.Записать();
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;//был измен набор оперативного регистра
			
			ЕстьЗаявкиНаРасходованиеДенежныхСредств = Ложь;
			Для Каждого Запись Из НаборЗаписей Цикл
				Если Запись.ВидДвижения = ВидДвиженияНакопления.Приход
					И Запись.КОплате > 0 
					И НачалоДня(Запись.Период) < НачалоДня(Запись.ДатаРегистратора)
					И НЕ ТипЗнч(ПроблемныйРегистратор) = Тип("ДокументСсылка.ВводОстатков")
					И НЕ ТипЗнч(ПроблемныйРегистратор) = Тип("ДокументСсылка.ВводОстатковВзаиморасчетов") Тогда
					Запись.Период = Запись.ДатаРегистратора;
				КонецЕсли;
				
				Если Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдалитьОплатаСамозанятому Тогда
					
					Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
					
					Если ЗначениеЗаполнено(Запись.НастройкаХозяйственнойОперации)
						И Запись.НастройкаХозяйственнойОперации = НеИспользуемаяНастройкаОперации Тогда
						Запись.НастройкаХозяйственнойОперации = НастройкаХозяйственнойОперации;
					КонецЕсли;
					
				КонецЕсли;
				Если ЗначениеЗаполнено(Запись.ЗаявкаНаРасходованиеДенежныхСредств) Тогда
					ЕстьЗаявкиНаРасходованиеДенежныхСредств = Истина;
				КонецЕсли;
			КонецЦикла;
			
			//Очистка ресурса "Оплачивается"
			Если ЕстьЗаявкиНаРасходованиеДенежныхСредств Тогда
				ЗаявкиНаРасходованиеДенежныхСредств = НаборЗаписей.ВыгрузитьКолонку("ЗаявкаНаРасходованиеДенежныхСредств");
				РеквизитыЗаявок = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ЗаявкиНаРасходованиеДенежныхСредств,"КонтролироватьОплатуПоОбъектамРасчетов");
				Для Каждого Запись Из НаборЗаписей Цикл
					Если ЗначениеЗаполнено(Запись.ЗаявкаНаРасходованиеДенежныхСредств)
						И Запись.Оплачивается <> 0 
						И НЕ РеквизитыЗаявок[Запись.ЗаявкаНаРасходованиеДенежныхСредств] Тогда
						Запись.Оплачивается = 0;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			//Перезаполнение поля ПорядокЗачетаПоДатеПлатежа
			ТипДокумента = ТипЗнч(Запись.Регистратор);
			Тип = ОперативныеВзаиморасчетыСервер.НомерТипа(ТипДокумента);
			Для Каждого Запись Из НаборЗаписей Цикл
				Если Запись.ВидДвижения = ВидДвиженияНакопления.Приход
					И Запись.Сумма > 0 
					И ЗначениеЗаполнено(Запись.ДатаПлатежа)
					И НачалоДня(Запись.ДатаПлатежа) <> НачалоДня(Запись.ДатаРегистратора) 
					И Запись.ПорядокОперации = Запись.ПорядокЗачетаПоДатеПлатежа 
					И Запись.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами Тогда
					Запись.ПорядокЗачетаПоДатеПлатежа = ОперативныеВзаиморасчетыСервер.Порядок(Запись.ДатаПлатежа, 
						ОбновляемыеДанные.РегистраторНомер, ТипДокумента, Сред(Запись.ПорядокОперации,9,1), Тип);
				КонецЕсли;
			КонецЦикла;
			#Область ИсправлениеПорядкаОперации
			Если ТипЗнч(ПроблемныйРегистратор) = Тип("ДокументСсылка.ЗаказПоставщику")
				
				Тогда
				НомерДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроблемныйРегистратор, "Номер");
				Для Каждого Запись Из НаборЗаписей Цикл
					Если Запись.КПоступлению <> 0 Тогда
						Запись.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(
							Запись.ДатаРегистратора,
							НомерДокумента,
							ТипЗнч(Запись.Регистратор),
							1);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			#КонецОбласти
			
			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			ИначеЕсли ОтметитьОбработку Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ПроблемныйРегистратор);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры
 
#КонецОбласти

#КонецОбласти

#КонецЕсли